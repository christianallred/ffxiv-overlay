{"version":3,"sources":["utils/constants.js","store/store.js","components/EncounterList/index.jsx","utils/formatter.js","components/EncounterStats/index.jsx","components/Header/index.jsx","components/CombatantBar/index.jsx","components/CombatantsList/index.jsx","components/CombatantDetails/index.jsx","components/DamageMeter.jsx","store/eventListeners.js","App.js","reportWebVitals.ts","index.js"],"names":["whiteListendEncounterMetrics","whiteListCombatantMetrics","HANDLE_DATA_INJEST","HANDLE_STATE_CHANGE","HANDLE_ENCOUNTER_SELECT","HANDLE_COMBATANT_SELECT","HANDLE_CHART_VIEW_CHANGE","TOGGLE_SHOW_DETAILS","chartViews","initialState","data","Encounter","Combatant","Encounters","SelectedEncounter","SelectedCombatant","chartView","showDetails","getSelectedData","state","deepMergeEncounters","ClonedData","Object","assign","sortBy","filter","d","parseInt","healed","damagetaken","damage","getSelectedCombatant","find","cob","name","hanldeCombatantSelect","combatant","type","store","createStore","action","clonedState","cloneDeep","processedData","processData","title","newEncs","concat","length","pop","index","getNextChartView","current","processEncounter","key","hasOwnProperty","processCombatant","encounter","obj","some","metric","encounters","ret","Combatants","prop","deepMergeEncounter","deepMergeCombatants","ExistingEncounter","duration","DURATION","Existing","dps","encdps","hits","crithits","misses","swings","tohit","maxhit","MAXHIT","DirectHitPct","DirectHitCount","CritDirectHitPct","CritDirectHitCount","enchps","critheals","maxheal","MAXHEAL","maxhealward","MAXHEALWARD","OverHealPct","healstaken","powerdrain","powerheal","kills","deaths","threatdelta","Last10DPS","Last30DPS","Last60DPS","Job","ParryPct","BlockPct","mapDispatchToProps","handleEncounterSelect","connect","pure","props","useState","show","setShow","map","onClick","className","numeral","format","foramtNumber","number","parseFloat","toFixed","group","setGroup","self","DataSource","undefined","datalength","x","substring","formatNumber","hanldeChartViewChange","hanldeToggleShowDetails","job","width","Math","min","total","max","perSecond","isSelf","characterName","toLowerCase","style","totalFormatted","additional","percentage","src","toUpperCase","alt","rank","names","keys","maxdps","ignoreRank","combatantRows","item","stats","buildHealerData","buildTankData","buildDamageData","charView","DamageRows","formatter","HealingRows","TankingRows","DamageMeter","this","handleClick","classnames","CombatantsList","React","Component","defaultProps","parseData","noJobColors","dispatch","selectedData","getState","window","addOverlayListener","update","console","log","startOverlayEvents","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b86ba0b6.chunk.js","sourcesContent":["export const whiteListendEncounterMetrics = [\n    'title',\n    'DURATION',\n    'damage',\n    'dps',\n    'encdps',\n    'hits',\n    'crithits',\n    'crithit%',\n    'misses',\n    'maxhit',\n    'MAXHIT',\n    'healed',\n    'enchps',\n    'critheal%',\n    'maxheal',\n    'maxhealward',\n    'damagetaken',\n    'healstaken',\n    'powerdrain',\n    'powerheal',\n    'kills',\n    'deaths',\n    'CurrentZoneName',\n    'Last10DPS',\n    'Last30DPS',\n    'Last60DPS',\n]\n\nexport const whiteListCombatantMetrics = [\n    'name',\n    \"DURATION\",\n    'damage',\n    'damage%',\n    'dps',\n    'encdps',\n    'hits',\n    'crithits',\n    'crithit%',\n    'misses',\n    'swings',\n    'tohit',\n    'maxhit',\n    'MAXHIT',\n    'DirectHitPct',\n    'DirectHitCount',\n    'CritDirectHitPct',\n    'CritDirectHitCount',\n\n    'healed',\n    'healed%',\n    'enchps',\n    'critheals',\n    'critheal%',\n    'maxheal',\n    'MAXHEAL',\n    'maxhealward',\n    'MAXHEALWARD',\n    'OverHealPct',\n\n    'damagetaken',\n    'healstaken',\n    'powerdrain',\n    'powerheal',\n    'kills',\n    'deaths',\n    'threatdelta',\n    'Last10DPS',\n    'Last30DPS',\n    'Last60DPS',\n    'Job',\n    'ParryPct',\n    'BlockPct',\n]\n\n/*\n{\n    \"Encounter\": {\n      \"n\": \"\\n\",\n      \"t\": \"\\t\",\n      \"title\": \"Encounter\",\n      \"duration\": \"03:22\",\n      \"DURATION\": \"202\",\n      \"damage\": \"132174\",\n      \"damage-m\": \"0.13\",\n      \"damage-*\": \"132.17K\",\n      \"DAMAGE-k\": \"132\",\n      \"DAMAGE-m\": \"0\",\n      \"DAMAGE-b\": \"0\",\n      \"DAMAGE-*\": \"132K\",\n      \"dps\": \"654.33\",\n      \"dps-*\": \"dps-*\",\n      \"DPS\": \"654\",\n      \"DPS-k\": \"1\",\n      \"DPS-m\": \"DPS-m\",\n      \"DPS-*\": \"654\",\n      \"encdps\": \"654.33\",\n      \"encdps-*\": \"654\",\n      \"ENCDPS\": \"654\",\n      \"ENCDPS-k\": \"1\",\n      \"ENCDPS-m\": \"0\",\n      \"ENCDPS-*\": \"654\",\n      \"hits\": \"67\",\n      \"crithits\": \"11\",\n      \"crithit%\": \"0%\",\n      \"misses\": \"0\",\n      \"hitfailed\": \"0\",\n      \"swings\": \"67\",\n      \"tohit\": \"100.00\",\n      \"TOHIT\": \"100\",\n      \"maxhit\": \"YOU-Storm's Path-4930\",\n      \"MAXHIT\": \"YOU-4930\",\n      \"maxhit-*\": \"YOU-Storm's Path-4.93K\",\n      \"MAXHIT-*\": \"YOU-4930\",\n      \"healed\": \"6497\",\n      \"enchps\": \"32.16\",\n      \"enchps-*\": \"32\",\n      \"ENCHPS\": \"32\",\n      \"ENCHPS-k\": \"0\",\n      \"ENCHPS-m\": \"0\",\n      \"ENCHPS-*\": \"32\",\n      \"heals\": \"2\",\n      \"critheals\": \"11\",\n      \"critheal%\": \"0%\",\n      \"cures\": \"0\",\n      \"maxheal\": \"YOU-Storm's Path-3285\",\n      \"MAXHEAL\": \"YOU-3285\",\n      \"maxhealward\": \"YOU-Storm's Path-3285\",\n      \"MAXHEALWARD\": \"YOU-3285\",\n      \"maxheal-*\": \"YOU-Storm's Path-3.29K\",\n      \"MAXHEAL-*\": \"YOU-3285\",\n      \"maxhealward-*\": \"YOU-Storm's Path-3.29K\",\n      \"MAXHEALWARD-*\": \"YOU-3285\",\n      \"damagetaken\": \"0\",\n      \"damagetaken-*\": \"0\",\n      \"healstaken\": \"6497\",\n      \"healstaken-*\": \"6.50K\",\n      \"powerdrain\": \"0\",\n      \"powerdrain-*\": \"0\",\n      \"powerheal\": \"0\",\n      \"powerheal-*\": \"0\",\n      \"kills\": \"0\",\n      \"deaths\": \"0\",\n      \"CurrentZoneName\": \"Middle La Noscea\",\n      \"Last10DPS\": \"650\",\n      \"Last30DPS\": \"520\",\n      \"Last60DPS\": \"724\"\n    },\n    \"Combatant\": {\n      \"YOU\": {\n        \"n\": \"\\n\",\n        \"t\": \"\\t\",\n        \"name\": \"YOU\",\n        \"duration\": \"03:22\",\n        \"DURATION\": \"202\",\n        \"damage\": \"132174\",\n        \"damage-m\": \"0.13\",\n        \"damage-b\": \"0.00\",\n        \"damage-*\": \"132.17K\",\n        \"DAMAGE-k\": \"132\",\n        \"DAMAGE-m\": \"0\",\n        \"DAMAGE-b\": \"0\",\n        \"DAMAGE-*\": \"132K\",\n        \"damage%\": \"100%\",\n        \"dps\": \"654.33\",\n        \"dps-*\": \"654\",\n        \"DPS\": \"654\",\n        \"DPS-k\": \"1\",\n        \"DPS-m\": \"0\",\n        \"DPS-*\": \"654\",\n        \"encdps\": \"654.33\",\n        \"encdps-*\": \"654\",\n        \"ENCDPS\": \"654\",\n        \"ENCDPS-k\": \"1\",\n        \"ENCDPS-m\": \"0\",\n        \"ENCDPS-*\": \"654\",\n        \"hits\": \"67\",\n        \"crithits\": \"11\",\n        \"crithit%\": \"16%\",\n        \"crittypes\": \"0.0%L - 0.0%F - 0.0%M\",\n        \"misses\": \"0\",\n        \"hitfailed\": \"0\",\n        \"swings\": \"67\",\n        \"tohit\": \"100.00\",\n        \"TOHIT\": \"100\",\n        \"maxhit\": \"Storm's Path-4930\",\n        \"MAXHIT\": \"4930\",\n        \"maxhit-*\": \"Storm's Path-4.93K\",\n        \"MAXHIT-*\": \"4930\",\n        \"healed\": \"6497\",\n        \"healed%\": \"100%\",\n        \"enchps\": \"32.16\",\n        \"enchps-*\": \"32\",\n        \"ENCHPS\": \"32\",\n        \"ENCHPS-k\": \"0\",\n        \"ENCHPS-m\": \"0\",\n        \"ENCHPS-*\": \"32\",\n        \"critheals\": \"0\",\n        \"critheal%\": \"0%\",\n        \"heals\": \"2\",\n        \"cures\": \"0\",\n        \"maxheal\": \"Storm's Path-3285\",\n        \"MAXHEAL\": \"3285\",\n        \"maxhealward\": \"Storm's Path-3285\",\n        \"MAXHEALWARD\": \"3285\",\n        \"maxheal-*\": \"Storm's Path-3.29K\",\n        \"MAXHEAL-*\": \"3.29K\",\n        \"maxhealward-*\": \"Storm's Path-3.29K\",\n        \"MAXHEALWARD-*\": \"3.29K\",\n        \"damagetaken\": \"0\",\n        \"damagetaken-*\": \"0\",\n        \"healstaken\": \"6497\",\n        \"healstaken-*\": \"6.50K\",\n        \"powerdrain\": \"0\",\n        \"powerdrain-*\": \"0\",\n        \"powerheal\": \"0\",\n        \"powerheal-*\": \"0\",\n        \"kills\": \"0\",\n        \"deaths\": \"0\",\n        \"threatstr\": \"+(0)0/-(0)0\",\n        \"threatdelta\": \"0\",\n        \"NAME3\": \"YOU\",\n        \"NAME4\": \"YOU\",\n        \"NAME5\": \"YOU\",\n        \"NAME6\": \"YOU\",\n        \"NAME7\": \"YOU\",\n        \"NAME8\": \"YOU\",\n        \"NAME9\": \"YOU\",\n        \"NAME10\": \"YOU\",\n        \"NAME11\": \"YOU\",\n        \"NAME12\": \"YOU\",\n        \"NAME13\": \"YOU\",\n        \"NAME14\": \"YOU\",\n        \"NAME15\": \"YOU\",\n        \"Last10DPS\": \"487\",\n        \"Last30DPS\": \"520\",\n        \"Last60DPS\": \"698\",\n        \"Job\": \"War\",\n        \"ParryPct\": \"0%\",\n        \"BlockPct\": \"0%\",\n        \"IncToHit\": \"---\",\n        \"OverHealPct\": \"100%\",\n        \"DirectHitPct\": \"3%\",\n        \"DirectHitCount\": \"2\",\n        \"CritDirectHitCount\": \"0\",\n        \"CritDirectHitPct\": \"0%\"\n      }\n    },\n    \"isActive\": \"true\"\n  }\n  */","import { createStore } from 'redux'\nimport { concat, sortBy,filter, cloneDeep } from 'lodash';\nimport {whiteListendEncounterMetrics,whiteListCombatantMetrics} from '../utils/constants';\n// Constants\nconst HANDLE_DATA_INJEST = \"HANDLE_DATA_INJEST\";\nconst HANDLE_STATE_CHANGE = \"HANDLE_STATE_CHANGE\";\nconst HANDLE_ENCOUNTER_SELECT = \"HANDLE_ENCOUNTER_SELECT\";\nconst HANDLE_COMBATANT_SELECT = \"HANDLE_COMBATANT_SELECT\"\nconst HANDLE_CHART_VIEW_CHANGE = \"HANDLE_CHART_VIEW_CHANGE\";\nconst TOGGLE_SHOW_DETAILS = \"TOGGLE_SHOW_DETAILS\";\n\n\nexport const chartViews =  {\n    Damage: 'Damage',\n    Healing: 'Healing',\n    Tanking: 'Tanking'\n}\n\n// Initial\nconst initialState = {\n    data: {\n        Encounter: {}, \n        Combatant: {},\n    },\n    Encounters: [],\n    SelectedEncounter: null,\n    SelectedCombatant: null,\n    chartView: chartViews.Damage,\n    showDetails: false,\n}\n\n\n// Reducers\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case HANDLE_DATA_INJEST:\n            var clonedState = cloneDeep(state);\n            const processedData = processData(action.data);\n\n            if (\n                clonedState.data.Encounter && clonedState.data.Encounter.title === 'Encounter' &&\n                processedData.Encounter.title !== 'Encounter'\n            ){\n                var newEncs = concat(\n                    [ processedData ],\n                    clonedState.Encounters\n                )\n                if (newEncs.length > 15){\n                    newEncs.pop();\n                }   \n                \n                clonedState.Encounters = newEncs\n            }\n\n            // this is important that it is at the end\n            clonedState.data = processedData\n            return clonedState;\n\n        case HANDLE_STATE_CHANGE:\n            \n            return state;\n        case HANDLE_ENCOUNTER_SELECT: \n            return {...state, SelectedEncounter: action.index, SelectedCombatant: null}\n        case HANDLE_CHART_VIEW_CHANGE: \n            return {...state, chartView: getNextChartView(state.chartView)}\n        case TOGGLE_SHOW_DETAILS:\n            return {...state, showDetails: !state.showDetails}\n        case HANDLE_COMBATANT_SELECT: \n            return {...state, SelectedCombatant: action.combatant}\n        default:\n            return state\n    }\n}\n\n// Selector\nexport const getSelectedData = (state) => {\n    var data = {};\n\n    // first see what encounter we are viewing. \n    if (state.SelectedEncounter !== null){\n        if (state.SelectedEncounter === \"ALL\"){\n            //data = state.data\n            data = deepMergeEncounters( state.Encounters )\n        } else {\n            data = state.Encounters[state.SelectedEncounter]\n        }\n    } else {\n        data = state.data\n    }\n\n    // now see what data set we want. \n    var ClonedData = Object.assign({}, data);\n    // this is bad because it is changing the shape of combatants\n    if (state.chartView === chartViews.Healing) {\n        ClonedData.Combatant = sortBy(\n            filter(ClonedData.Combatant, (d) => parseInt(d.healed, 10) > 0), \n            (d) => -parseInt(d.healed, 10)   \n        );\n    }\n    else if (state.chartView === chartViews.Tanking) {\n        ClonedData.Combatant = sortBy( \n            filter(ClonedData.Combatant, d => parseInt(d.damagetaken, 10) > 0),\n            (d) => -parseInt(d.damagetaken, 10)\n        );\n    } \n    else if (state.chartView === chartViews.Damage){\n        ClonedData.Combatant = sortBy( \n            filter(ClonedData.Combatant, d => parseInt(d.damage, 10) > 0),\n            (d) => -parseInt(d.damage, 10)\n        );\n    }\n\n    return ClonedData;\n}\n\nexport const getSelectedCombatant = (state) => {\n    const Encounter = getSelectedData(state);\n    return Encounter.Combatant.find(cob => cob.name === state.SelectedCombatant)\n   //  return Encounter.Combatant[state.SelectedCombatant]\n}\n\n\n\n// Actions\nexport const hanldeInjest = (data) => ({\n    type: HANDLE_DATA_INJEST,\n    data \n})\nexport const handleStateChange = (data) => ({\n    type: HANDLE_STATE_CHANGE,\n    data\n})\n\nexport const handleEncounterSelect = (index) => ({\n    type: HANDLE_ENCOUNTER_SELECT,\n    index\n})\nexport const hanldeChartViewChange = () => ({\n    type: HANDLE_CHART_VIEW_CHANGE,\n\n})\nexport const hanldeToggleShowDetails = () => ({\n    type: TOGGLE_SHOW_DETAILS,\n\n})\nexport const hanldeCombatantSelect = (combatant) => ({\n    type: HANDLE_COMBATANT_SELECT,\n    combatant\n})\n\n\n\n\n// Store\nconst store = createStore( reducer, initialState )\n\n\n\nexport default store;\n\n// Helpers\nconst getNextChartView = (current) => {\n    switch(current){\n        case chartViews.Damage: \n            return chartViews.Healing\n        case chartViews.Healing:\n                return chartViews.Tanking\n        case chartViews.Tanking: \n            return chartViews.Damage\n        default: \n            return chartViews.Damage\n    }\n}\n\n// tehse functions are for simplifying teh data from teh plugin\nconst processData = (data) => {\n    var processData = {\n        Encounter: processEncounter(data.Encounter),\n        Combatant: {},\n    };\n    for (const key in data.Combatant) {\n        if (!data.Combatant.hasOwnProperty(key)) continue;\n        processData.Combatant[key] = processCombatant(data.Combatant[key])\n    }\n    return processData;\n}\nconst processEncounter = ( Encounter ) => {\n    var encounter = {};\n    for(let obj in Encounter){\n        if (!Encounter.hasOwnProperty(obj)) continue;\n        if (whiteListendEncounterMetrics.some(metric => metric === obj)){\n            encounter[obj] = Encounter[obj];\n        }\n    }\n    return encounter\n}\nconst processCombatant = ( Combatant ) => {\n    var combatant = {};\n    for(let obj in Combatant){\n        if (!Combatant.hasOwnProperty(obj)) continue;\n        if (whiteListCombatantMetrics.some(metric => metric === obj)){\n            combatant[obj] = Combatant[obj];\n        }\n    }\n    return combatant\n}\n\n\n// this is so taht we can use the All COmmand pretty broken atm...\nconst deepMergeEncounters = (encounters) => {\n    var Encounters = cloneDeep(encounters);\n    var ret = {\n        Combatant: {},\n        Encounter: {},\n    }\n    for (let index = 0; index < Encounters.length; index++) {\n        const encounter = Encounters[index];\n        const Combatants = encounter.Combatant;\n        const Encounter = encounter.Encounter;\n        if (index === 0){\n            ret = encounter;\n            continue;\n        }\n        ret.Encounter = deepMergeEncounter(Encounter, ret.Encounter) \n        for (let prop in Combatants){\n            if (!Combatants.hasOwnProperty(prop)) continue\n            const combatant = Combatants[prop];\n            if ( ret.Combatant.hasOwnProperty(prop) ){\n                ret.Combatant[prop] = deepMergeCombatants(combatant, ret.Combatant[prop] )\n            } else {\n                ret.Combatant[prop] = combatant\n            }\n        }\n    }\n    return ret;\n}\nconst deepMergeEncounter = (encounter, ExistingEncounter) => { \n    // todo: finish teh merge logic\n    return {\n        ...ExistingEncounter,\n        title: \"All\",\n        duration: '--', // TODO:\n        DURATION: parseInt(ExistingEncounter.DURATION) + parseInt(encounter.DURATION),\n        damage: parseInt(ExistingEncounter.damage) + parseInt(encounter.damage),\n        // 'dps',\n        // 'encdps',\n        // 'hits',\n        // 'crithits',\n        // 'crithit%',\n        // 'misses',\n        // 'maxhit',\n        // 'MAXHIT',\n        // 'healed',\n        // 'enchps',\n        // 'critheal%',\n        // 'maxheal',\n        // 'maxhealward',\n        // 'damagetaken',\n        // 'healstaken',\n        // 'powerdrain',\n        // 'powerheal',\n        // 'kills',\n        // 'deaths',\n        // 'CurrentZoneName',\n        // 'Last10DPS',\n        // 'Last30DPS',\n        // 'Last60DPS'\n    }\n    \n}\nconst deepMergeCombatants = (combatant, Existing) => {\n    // TODO: finish teh merge logic. \n    var object = {\n        ...Existing,\n        DURATION: parseInt(Existing.DURATION) + parseInt(combatant.DURATION),\n        damage: parseInt(Existing.damage) + parseInt(combatant.damage),\n        dps: 0, // TODO: Calculate \n        encdps: 0, // TODO: Calculate \n        hits: parseInt(Existing.hits) + parseInt(combatant.hits),\n        crithits: parseInt(Existing.crithits) + parseInt(combatant.crithits),\n        'crithit%': 0, // TODO: Calculate \n        misses: parseInt(Existing.misses) + parseInt(combatant.misses),\n        swings: parseInt(Existing.swings) + parseInt(combatant.swings),\n        tohit: 0, // ???\n        maxhit: 0, // calc\n        MAXHIT: 0, // calc,\n        DirectHitPct: 0, // calc\n        DirectHitCount: parseInt(Existing.DirectHitCount) + parseInt(combatant.DirectHitCount),\n        CritDirectHitPct: 0, // calc\n        CritDirectHitCount: parseInt(Existing.CritDirectHitCount) + parseInt(combatant.CritDirectHitCount),\n        healed: parseInt(Existing.healed) + parseInt(combatant.healed),\n        'healed%': 0, // calc\n        enchps: 0, // calc\n        critheals: parseInt(Existing.critheals) + parseInt(combatant.critheals),\n        'critheal%': 0, // calc\n        maxheal: 0, // calc\n        MAXHEAL: 0, // calc\n        maxhealward: 0, // calc\n        MAXHEALWARD: 0, // calc\n        OverHealPct: 0, // calc\n        damagetaken: parseInt(Existing.damagetaken) + parseInt(combatant.damagetaken),\n        healstaken: parseInt(Existing.healstaken) + parseInt(combatant.healstaken),\n        powerdrain: parseInt(Existing.powerdrain) + parseInt(combatant.powerdrain),\n        powerheal: parseInt(Existing.powerheal) + parseInt(combatant.powerheal),\n        kills: parseInt(Existing.kills) + parseInt(combatant.kills),\n        deaths: parseInt(Existing.deaths) + parseInt(combatant.deaths),\n        threatdelta: 0, // calc\n        Last10DPS: 0,\n        Last30DPS: 0, \n        Last60DPS: 0,\n        Job: combatant.Job,\n        ParryPct: 0, // No way to calc\n        BlockPct: 0, // no way to calc\n    }\n    return object;\n}\n\n","import React, {useState} from 'react'\nimport {connect} from 'react-redux'\nimport numeral from 'numeral';\n\nimport {\n    handleEncounterSelect, \n    getSelectedData\n} from '../../store/store'\nimport './style.scss'\n\nconst EncounterList = (props) => {\n    const [show, setShow] = useState(false);\n\n    const encounters = props.Encounters.map((encounter, index) => {\n        return (\n            <div key={index} onClick={ () => props.handleEncounterSelect(index)}>\n                {encounter.Encounter.title}\n            </div>\n        );\n    });\n\n    return (\n        <div className=\"encounter-data ff-header\">\n            <span className=\"button\" onClick={ () => setShow( !show ) }>\n                {props.Encounter.title ? props.Encounter.title : \"Encounter\"} - {numeral(props.Encounter.DURATION).format(\"00:00\")} \n                {!show ? null : <div className=\"dropdown-menu encounters-list-dropdown\">\n                    <div onClick={() => props.handleEncounterSelect(null)}>Current Fight</div>\n                    {/* <div onClick={() => props.handleEncounterSelect(\"ALL\")}>All</div> */}\n                    {encounters}\n                </div>\n                }   \n            </span>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = {\n    handleEncounterSelect\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        Encounter: getSelectedData(state).Encounter,\n        Encounters: state.Encounters\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    null,\n    {pure: false}\n)(EncounterList)\n\n\n","const foramtNumber = (number) => {\n    number = parseFloat(number, 10);\n\n    if (number >= 1000) {\n        return (number / 1000).toFixed(2) + 'K';\n    }\n    else if (number >= 1000000) {\n        return (number / 1000000).toFixed(2) + 'M';\n    }\n\n    return number.toFixed(2);\n};\n\nexport default foramtNumber","import React, {useState} from 'react'\nimport { connect } from 'react-redux'\nimport formatNumber from '../../utils/formatter'\nimport { getSelectedData } from '../../store/store'\nimport './style.scss'\n\nconst EncounterStats = (props) => {\n    const [group, setGroup] = useState(true)\n\n    if (!props.showDetails) return <div></div>\n\n    var data = props.Combatant;\n    var encounter = props.Encounter;\n    \n    // need to fix this\n    if (!data){\n        return <div></div>\n    }\n\n    var self = data['YOU'];\n    \n    // This is the switcher for Toggling group info or self info\n    var DataSource = group ? encounter : self;\n    \n    if (self === undefined){\n        DataSource = encounter;\n    }\n    \n    // Calculate the drect hit % based off of the combatant list. This is not efficient and needs to be removed\n    // Once the encounter object is fixed to properly include this info.\n    var datalength = 0;\n    var DirectHitPct = 0\n    var CritDirectHitPct = 0;\n    \n    if (group){\n      if (data !== undefined){\n        for (var x in data){\n          if(!data.hasOwnProperty(x)) continue;\n          DirectHitPct += parseFloat(data[x].DirectHitPct.substring(0, (data[x].DirectHitPct.length - 1)));\n          CritDirectHitPct += parseFloat(data[x].CritDirectHitPct.substring(0, (data[x].CritDirectHitPct.length - 1)));\n          datalength++;\n        }\n\n        if ( DirectHitPct > 0 ){\n            DirectHitPct = parseFloat( DirectHitPct / datalength);\n        }\n        if (CritDirectHitPct > 0){\n          CritDirectHitPct = parseFloat( CritDirectHitPct / datalength);\n        }\n      }\n\n    } else {\n      if (self !== undefined){\n        DirectHitPct = self.DirectHitPct;\n        CritDirectHitPct = self.CritDirectHitPct;\n      }\n    }\n   \n    return (\n        <div className=\"extra-details\">\n            {\n                props.chartView === \"Damage\" ?\n                    <div className=\"data-set-view-switcher clearfix\" onClick={ () => setGroup(!group) }>\n                        <span className={`button data-set-option ${group ? 'active' : ''}`}>Grp</span>\n                        <span className={`button data-set-option ${!group ? 'active' : ''}`}>Ind</span>\n                    </div>\n                : null\n            }\n            <div className=\"extra-row damage\">\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">Damage</span>\n                    <span className=\"value ff-text\">\n                        {`${formatNumber(DataSource.damage)} (${formatNumber(DataSource.encdps)})`}\n                    </span>\n                </div>\n\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">Max</span>\n                    <span className=\"value ff-text\">\n                        {DataSource.maxhit}\n                    </span>\n                </div>\n            </div>\n\n            <div className=\"extra-row damage\">\n                {/* crithit is not being calculated properly in the Encounter object so instead we are calcing it on the fly*/}\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">Crit%</span>\n                    <span className=\"value ff-text\">\n                    { formatNumber( parseFloat(DataSource.crithits / DataSource.hits * 100) ) + \"%\" }\n                    </span>\n                </div>\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">Misses</span>\n                    <span className=\"value ff-text\">\n                        {encounter.misses}\n                    </span>\n                </div>\n                {/* DirectHitPct coming from the Encounter object is missing so we are calcing above */}\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">Direct%</span>\n                    <span className=\"value ff-text\">\n                        {formatNumber(DirectHitPct) + \"%\"}\n                    </span>\n                </div>\n                {/* CritDirectHitPct coming from the Encounter object is missing so we are calcing above */}\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">DirectCrit%</span>\n                    <span className=\"value ff-text\">\n                        {formatNumber(CritDirectHitPct) + \"%\"}\n                    </span>\n                </div>\n            </div>\n            \n            <div className=\"extra-row healing\">\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">Heals</span>\n                    <span className=\"value ff-text\">\n                        {`${formatNumber(DataSource.healed)} (${formatNumber(DataSource.enchps)})`}\n                    </span>\n                </div>\n                {/* Overlay plugin is not returning correct heal values  */}\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">Crit%</span>\n                    <span className=\"value ff-text\">\n                        {DataSource['critheal%']}\n                    </span>\n                </div>\n                <div className=\"cell\">\n                    <span className=\"label ff-header\">Max</span>\n                    <span className=\"value ff-text\">\n                        {DataSource.maxheal}\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ...getSelectedData(state),\n        chartView: state.chartView,\n        showDetails: state.showDetails\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null,\n    null,\n    {pure: false}\n)(EncounterStats)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport EncounterList from '../EncounterList/'\nimport EncounterStats from '../EncounterStats/'\nimport {\n    hanldeChartViewChange,\n    hanldeToggleShowDetails\n} from '../../store/store'\n\nimport './style.scss'\n\nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <div className=\"encounter-header\">\n                <div>\n                    <EncounterList />\n                </div>\n                <div>\n                    <div className=\"button arrow\"\n                        onClick={props.hanldeToggleShowDetails}>\n                        {props.showDetails ? <span>&#8593;</span> : <span>&#8595;</span>} \n                    </div>\n                    <div className={`button chart-view-switcher ${props.chartView}`} \n                        onClick={props.hanldeChartViewChange}>\n                       {props.chartView}\n                    </div>\n                </div>\n            </div>\n            <EncounterStats />\n        </div>  \n    );\n}\n\nconst mapDispatchToProps = {\n    hanldeChartViewChange,\n    hanldeToggleShowDetails\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        Encounters: state.Encounters,\n        showDetails: state.showDetails,\n        chartView: state.chartView\n    }\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    null,\n    {pure: false}\n)(Header)\n\n\n\n\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {hanldeCombatantSelect} from '../../store/store';\nimport './style.scss'\n\nconst CombatantBar = (props) => {\n    const jobImage = (job) => `/ffxiv-overlay/images/glow/${job.toUpperCase()}.png`\n\n    var width = Math.min(100, parseInt(props.total / props.max * 100, 10)) + '%';\n    if (props.perSecond === \"--- \") return null;\n\n    return <li\n        className={'row ' + (props.isSelf ? ' self' : '')}\n        onClick={() => props.hanldeCombatantSelect(props.characterName)}>\n        <div className={'bar ' + props.job.toLowerCase() } style={{width: width}} />\n        <div className=\"text-overlay\">\n            <div className=\"stats\">\n                <span className=\"total\">\n                    {props.totalFormatted}\n                </span>\n                {props.additional ?\n                    <span className=\"additional\">[{props.additional}]</span> \n                : null }\n                (\n                    <span className=\"ps\">\n                        {props.perSecond},\n                    </span>\n                    <span className=\"percent\">\n                        {props.percentage}\n                    </span>\n                )\n            </div>\n                \n            <div className=\"info\">\n                <span className='job-icon'>\n                    <img src={jobImage(props.job)} alt={props.job}/>\n                </span>\n                <span className=\"rank\">\n                    {props.rank}.\n                </span>\n                <span className=\"character-name\">\n                    {props.characterName}\n                </span>\n                <span className=\"character-job\">\n                    {props.job}\n                </span>\n            </div>\n        </div>\n    </li>\n}\n\nconst mapDispatchToProps = {\n    hanldeCombatantSelect\n}\nexport default connect(\n    null,\n    mapDispatchToProps,\n    null,\n    {pure: false}\n)(CombatantBar)\n","import React from 'react'\nimport formatNumber from '../../utils/formatter';\nimport CombatantBar from '../CombatantBar/'\nimport {connect} from 'react-redux';\nimport {getSelectedData,chartViews} from '../../store/store'\nimport './style.scss'\n\nconst Combatants = (props) => {\n    let maxRows = 20;\n    let names =  Object.keys(props.Combatants)\n    let maxdps = false;\n    let ignoreRank = 0;\n    \n    const buildHealerData = (combatant) => {\n        return {\n            job: combatant.Job || '',\n            characterName: combatant.name,\n            total: combatant.healed,\n            totalFormatted: formatNumber(combatant.healed),\n            perSecond: formatNumber(combatant.enchps),\n            additional: combatant['OverHealPct'],\n            percentage: combatant['healed%']\n        }\n    }\n    const buildTankData = (combatant) => {\n        return{\n            job: combatant.Job || '',\n            characterName: combatant.name,\n            total: combatant.damagetaken,\n            totalFormatted: formatNumber(combatant.damagetaken),\n            perSecond: combatant.ParryPct,\n            percentage: combatant.BlockPct\n        }\n    }\n    const buildDamageData = (combatant) => {\n        return {\n            job: combatant.Job || '',\n            characterName: combatant.name,\n            total: combatant.damage,\n            totalFormatted: formatNumber(combatant.damage),\n            perSecond: formatNumber(combatant.encdps),\n            percentage: combatant['damage%']\n        }\n    }\n    \n\n    let combatantRows = names.map((item, index) => {        \n        if (index > maxRows) return null;\n        let combatant = props.Combatants[item];\n        let stats = null;\n        let isSelf = combatant.name === 'YOU' || combatant.name === 'You';\n\n        if (combatant.Job === \"\"){\n            ignoreRank += 1\n        } else if (combatant.Job !== \"\") {\n            if (props.chartView === chartViews.Healing) {\n                if (parseInt(combatant.healed, 10) > 0) {\n                    if (!maxdps){\n                        maxdps = parseFloat(combatant.healed);\n                    }\n                    stats = buildHealerData(combatant)\n                }\n            }\n            else if (props.chartView === chartViews.Tanking) {\n                if (parseInt(combatant.damagetaken, 10) > 0) {\n                    if(!maxdps){\n                        maxdps = parseFloat(combatant.damagetaken);\n                    }\n                    stats = buildTankData(combatant)\n                }\n            }\n            else {\n                if(!maxdps){\n                    maxdps = parseFloat(combatant.damage);\n                }\n                stats = buildDamageData(combatant)\n            }\n\n            return <CombatantBar\n                    onClick={props.onClick}\n                    rank={ index + 1 - ignoreRank }\n                    data={combatant}\n                    isSelf={isSelf}\n                    key={combatant.name}\n                    max={maxdps}\n                    {...stats} />\n        }\n        return null\n    })\n\n    // var types = [\n    //     'pld',\n    //     'war',\n    //     'drk',\n    //     'gbr',\n\n    //     'whm',\n    //     'sch',\n    //     'ast',\n\n\n    //     \"mnk\",\n    //     'rog',\n    //     'drg',\n    //     'sam',\n\n    //     'blm',\n    //     'smn',\n    //     'rdm',\n\n    //     'brd',\n    //     'mch',\n    //     'dnc'\n    // ]\n    // let test = [];\n    // for (const [index,item] of types) {\n    //     test.push( \n    //         <li class=\"row\">\n    //             <div class={`bar ${item}`} style={{width: '100%'}}/>\n    //             <div className=\"text-overlay\">{item}</div>\n    //         </li>)\n    // }\n    return (\n        <ul className=\"combatants\">\n            {combatantRows}\n        </ul>\n    );\n}\n\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n    const selected = getSelectedData(state);\n    return {\n        Combatants: selected.Combatant,\n        chartView: state.chartView,\n    }\n}\n\n  \n// const mapDispatchToProps = { increment, decrement, reset }\n  \nexport default connect(\n    mapStateToProps,\n    null,\n    null,\n    {pure: false}\n)(Combatants)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {\n    getSelectedCombatant,\n    hanldeCombatantSelect\n} from '../../store/store'\nimport './styles.scss'\nimport formatter from '../../utils/formatter';\n\n// TODO: work out better styling\nconst CombatantDetails =(props) =>{\n    const DamageRowsMap = ['damage','encdps','MAXHIT','crithit%','DirectHitPct','CritDirectHitPct','misses','tohit',]\n    const HealingRowsMap = ['healed','enchps','OverHealPct','critheal%','MAXHEAL','MAXHEALWARD',]\n    const TankingRowsMap = ['damagetaken','healstaken','ParryPct','BlockPct','threatdelta','deaths',]\n\n    const DamageRows = DamageRowsMap.map((item,index) => {\n        return <div key={index}>\n            <span className=\"label ff-header\">{item.toLowerCase()}: </span>\n            <span className=\"value ff-text\">{formatter(props.Combatant[item])}</span>\n        </div>\n    })\n    const HealingRows = HealingRowsMap.map((item,index) => {\n        return <div key={index}>\n            <span className=\"label ff-header\">{item.toLowerCase()}: </span>\n            <span className=\"value ff-text\">{formatter(props.Combatant[item])}</span>\n        </div>\n    })\n    const TankingRows = TankingRowsMap.map((item,index) => {\n        return <div key={index}>\n            <span className=\"label ff-header\">{item.toLowerCase()}: </span>\n            <span className=\"value ff-text\">{formatter(props.Combatant[item])}</span>\n        </div>\n    })\n   \n    return (\n        <div className=\"combatant-detail\">\n            \n            <span className=\"button\" onClick={() => props.hanldeCombatantSelect(null)}>back</span>\n            \n            <span className=\"label ff-header\"> {props.Combatant.name}</span>\n\n            <div className=\"details-wrapper\">\n                <div>\n                    <span className=\"label ff-header\">Damage</span>\n                    {DamageRows}\n                </div>\n                <div>\n                    <span className=\"label ff-header\">Healing</span>\n                    {HealingRows}\n                </div>\n                <div>\n                    <span className=\"label ff-header\">Tanking</span>\n                    {TankingRows}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = {\n    hanldeCombatantSelect\n}\n\nconst mapStateToProps = (state /*, ownProps*/) =>\n{\n    return {\n        charView: state.chartView,\n        Combatant: getSelectedCombatant(state)\n    }\n} \n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    null,\n    {pure: false}\n)(CombatantDetails)","import React  from 'react'\nimport classnames from 'classnames';\nimport { connect } from 'react-redux'\n\nimport Header from './Header/';\nimport CombatantsList from './CombatantsList/';\nimport CombatantDetails from './CombatantDetails/'\nimport {\n    getSelectedData,\n    getSelectedCombatant\n} from '../store/store'\n\nclass DamageMeter extends React.Component {\n    render() {  \n        return (\n            <div\n                onClick={this.handleClick}\n                className={classnames({\n                    'damage-meter':true,\n                    'resizable': true,// fix this\n                })}>\n                <Header />\n                {this.props.SelectedCombatant ? \n                    <CombatantDetails /> :\n                    <CombatantsList />}\n            </div>\n        );\n    }\n}\nDamageMeter.defaultProps = {\n    parseData: {},\n    noJobColors: false\n};\n\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n    const selectedData = getSelectedData(state);\n    const SelectedCombatant = getSelectedCombatant(state);\n    return {\n        Combatants: selectedData.Combatant,\n        Encounter: selectedData.Encounter,\n        Encounters: state.Encounters,\n        SelectedCombatant\n    }\n}\n\n  \n// const mapDispatchToProps = { increment, decrement, reset }\n  \nexport default connect(\n    mapStateToProps,\n    null,\n    null,\n    {pure: false}\n)(DamageMeter)","import { hanldeInjest } from './store'\n\nexport const handleEventsListner = (dispatch, getState) => {\n    const onOverlayDataUpdate = (update) => {\n        console.log(update)\n        dispatch(hanldeInjest(update))\n    }\n    \n    window.addOverlayListener('CombatData',  onOverlayDataUpdate)\n\n    window.startOverlayEvents()\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport DamageMeter from './components/DamageMeter';\nimport store from './store/store'\n\nimport {handleEventsListner} from './store/eventListeners'\n\nhandleEventsListner(store.dispatch, store.getState)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <DamageMeter />\n    </Provider>\n  );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}