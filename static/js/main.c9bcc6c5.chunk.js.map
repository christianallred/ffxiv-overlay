{"version":3,"sources":["logo.svg","components/Header.jsx","utils/formatter.js","components/CombatantCompact.jsx","components/Combatants.jsx","components/Debugger.jsx","components/DamageMeter.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","EncountersArray","Header","props","state","expanded","group","showEncountersList","nextProps","encounter","encdps","e","this","onExtraDetailsClick","setState","data","self","rdps","parseFloat","rdps_max","isNaN","Infinity","Math","max","DataSource","undefined","datalength","DirectHitPct","CritDirectHitPct","x","hasOwnProperty","substring","length","className","onClick","handleEncounterClick","bind","title","onSelectEncounter","map","i","key","Encounter","duration","handleExtraDetails","onViewChange","currentView","handleToggleStats","formatNumber","damage","maxhit","crithits","hits","misses","healed","enchps","maxheal","Component","defaultProps","number","toFixed","CombatantCompact","job","window","location","host","origin","toLowerCase","width","min","parseInt","total","perSecond","isSelf","style","totalFormatted","additional","percentage","src","jobImage","rank","characterName","Combatants","Object","getOwnPropertyNames","combatant","stats","rows","isDataArray","isArray","dataArray","keys","names","slice","maxRows","maxdps","name","Job","damagetaken","ParryPct","BlockPct","push","encounterDamage","DamageMeter","onOverlayDataUpdate","update","detail","currentViewIndex","document","addEventListener","onOverlayStateUpdate","onOverlayMessage","nextState","selectedEncounter","index","chartViews","render","console","log","combatants","Combatant","encounterData","sortBy","filter","d","handleClick","parseData","isActive","noJobColors","handleViewChange","handleSelectEncounter","handleCombatRowClick","React","App","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9bcc6c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\r\nvar EncountersArray = [];\r\n\r\nexport default class Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: false,\r\n            group: true,\r\n            showEncountersList: false\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        // WIll need to add a null check here if we are swapping betwen self and group.\r\n        if (nextProps.encounter.encdps === '---') {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    handleExtraDetails(e) {\r\n        this.props.onExtraDetailsClick(e);\r\n\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Show dropdown for list of encounters\r\n     */\r\n    handleEncounterClick(e) {\r\n        this.setState({\r\n            showEncountersList: !this.state.showEncountersList\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Toggle between group and indidivual stats.\r\n     */\r\n    handleToggleStats(e){\r\n      this.setState({\r\n        group: !this.state.group\r\n      })\r\n    }\r\n\r\n    render() {\r\n        var data = this.props.data;\r\n        var encounter = this.props.encounter;\r\n        \r\n        // need to fix this\r\n        if (!data){\r\n            return <div></div>\r\n        }\r\n\r\n        var self = data['YOU'];\r\n        var rdps = parseFloat(encounter.encdps);\r\n        var rdps_max = 0;\r\n        if (!isNaN(rdps) && rdps !== Infinity) {\r\n            rdps_max = Math.max(rdps_max, rdps);\r\n        }\r\n\r\n        // This is the switcher for Toggling group info or self info\r\n        var DataSource = this.state.group ? encounter : self;\r\n        if (self == undefined){\r\n          DataSource = encounter;\r\n        }\r\n        \r\n        // Calculate the drect hit % based off of the combatant list. This is not efficient and needs to be removed\r\n        // Once the encounter object is fixed to properly include this info.\r\n        var datalength = 0;\r\n        var DirectHitPct = 0\r\n        var CritDirectHitPct = 0;\r\n        if (this.state.group){\r\n          if (data !== undefined){\r\n            for (var x in data){\r\n              if(!data.hasOwnProperty(x)) continue;\r\n              DirectHitPct += parseFloat(data[x].DirectHitPct.substring(0, (data[x].DirectHitPct.length - 1)));\r\n              CritDirectHitPct += parseFloat(data[x].CritDirectHitPct.substring(0, (data[x].CritDirectHitPct.length - 1)));\r\n              datalength++;\r\n            }\r\n            if ( DirectHitPct > 0 ){\r\n                DirectHitPct = parseFloat( DirectHitPct / datalength);\r\n            }\r\n            if (CritDirectHitPct > 0){\r\n              CritDirectHitPct = parseFloat( CritDirectHitPct / datalength);\r\n            }\r\n          }\r\n        } else {\r\n          if (self != undefined){\r\n            DirectHitPct = self.DirectHitPct;\r\n            CritDirectHitPct = self.CritDirectHitPct;\r\n          }\r\n        }\r\n\r\n        return (\r\n            <div className={`header ${this.state.expanded ? '' : 'collapsed'}`}>\r\n                <div className=\"encounter-header\">\r\n                    <div className=\"encounter-data ff-header\">\r\n                        <span className=\"target-name dropdown-parent\" onClick={this.handleEncounterClick.bind(this)}>\r\n                            {encounter.title}\r\n                            <div className={`dropdown-menu encounters-list-dropdown ${this.state.showEncountersList ? '' : 'hidden'}`}>\r\n                                <div onClick={this.props.onSelectEncounter.bind(this, null)}>\r\n                                    Current Fight\r\n                                </div>\r\n                                {EncountersArray.map(function(encounter, i) {\r\n                                    return (\r\n                                        <div key={i} onClick={this.props.onSelectEncounter.bind(this, i)}>\r\n                                            {encounter.Encounter.title}\r\n                                        </div>\r\n                                    );\r\n                                }.bind(this))}\r\n                            </div>\r\n                        </span>\r\n                        <span className=\"duration\">\r\n                            ({encounter.duration})\r\n                        </span>\r\n                        <span className={`arrow ${this.state.expanded ? 'up' : 'down'}`} onClick={this.handleExtraDetails.bind(this)} />\r\n                    </div>\r\n                    <div\r\n                        className=\"chart-view-switcher\"\r\n                        onClick={this.props.onViewChange}>\r\n                        {this.props.currentView}\r\n                    </div>\r\n                </div>\r\n                <div className=\"extra-details\">\r\n                    {\r\n                        this.props.currentView == \"Damage\" ?\r\n                        <div className=\"data-set-view-switcher clearfix\" onClick={this.handleToggleStats.bind(this)}>\r\n                            <span className={`data-set-option ${this.state.group ? 'active' : ''}`}>G</span>\r\n                            <span className={`data-set-option ${!this.state.group ? 'active' : ''}`}>I</span>\r\n                        </div>\r\n                        : null\r\n                    }\r\n                    \r\n                    <div className=\"extra-row damage\">\r\n                        <div className=\"cell\">\r\n                            <span className=\"label ff-header\">Damage</span>\r\n                            <span className=\"value ff-text\">\r\n                                {`${formatNumber(DataSource.damage)} (${formatNumber(DataSource.encdps)})`}\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"cell\">\r\n                            <span className=\"label ff-header\">Max</span>\r\n                            <span className=\"value ff-text\">\r\n                                {DataSource.maxhit}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"extra-row damage\">\r\n                      {/* crithit is not being calculated properly in the Encounter object so instead we are calcing it on the fly*/}\r\n                      <div className=\"cell\">\r\n                          <span className=\"label ff-header\">Crit%</span>\r\n                          <span className=\"value ff-text\">\r\n                            { formatNumber( parseFloat(DataSource.crithits / DataSource.hits * 100) ) + \"%\" }\r\n                          </span>\r\n                      </div>\r\n                      <div className=\"cell\">\r\n                          <span className=\"label ff-header\">Misses</span>\r\n                          <span className=\"value ff-text\">\r\n                              {encounter.misses}\r\n                          </span>\r\n                      </div>\r\n                      {/* DirectHitPct coming from the Encounter object is missing so we are calcing above */}\r\n                      <div className=\"cell\">\r\n                          <span className=\"label ff-header\">Direct%</span>\r\n                          <span className=\"value ff-text\">\r\n                              {formatNumber(DirectHitPct) + \"%\"}\r\n                          </span>\r\n                      </div>\r\n                      {/* CritDirectHitPct coming from the Encounter object is missing so we are calcing above */}\r\n                      <div className=\"cell\">\r\n                          <span className=\"label ff-header\">DirectCrit%</span>\r\n                          <span className=\"value ff-text\">\r\n                              {formatNumber(CritDirectHitPct) + \"%\"}\r\n                          </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"extra-row healing\">\r\n                        <div className=\"cell\">\r\n                            <span className=\"label ff-header\">Heals</span>\r\n                            <span className=\"value ff-text\">\r\n                                {`${formatNumber(DataSource.healed)} (${formatNumber(DataSource.enchps)})`}\r\n                            </span>\r\n                        </div>\r\n                        {/* Overlay plugin is not returning correct heal values  */}\r\n                        <div className=\"cell\">\r\n                            <span className=\"label ff-header\">Crit%</span>\r\n                            <span className=\"value ff-text\">\r\n                                {DataSource['critheal%']}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"cell\">\r\n                            <span className=\"label ff-header\">Max</span>\r\n                            <span className=\"value ff-text\">\r\n                                {DataSource.maxheal}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nHeader.defaultProps = {\r\n    encounter: {},\r\n    onViewChange() {},\r\n    onSelectEncounter() {},\r\n    onExtraDetailsClick() {}\r\n};\r\n\r\n\r\n\r\n// // fiddle: http://jsfiddle.net/v1ddnsvh/8/\r\n// /* global window */\r\n// // If you need a handy tool to transpile your JSX: https://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=es2015%2Creact%2Cstage-2&targets=&browsers=&builtIns=false&debug=false&code_lz=Q\r\n// var IMAGE_PATH = 'images';\r\n// var EncountersArray = [];\r\n\r\n// var React = window.React;\r\n\r\nvar formatNumber = (number) => {\r\n    number = parseFloat(number, 10);\r\n\r\n    if (number >= 1000) {\r\n        return (number / 1000).toFixed(2) + 'K';\r\n    }\r\n    else if (number >= 1000000) {\r\n        return (number / 1000000).toFixed(2) + 'M';\r\n    }\r\n\r\n    return number.toFixed(2);\r\n};\r\n\r\n\r\n\r\n\r\n","export default (number) => {\r\n    number = parseFloat(number, 10);\r\n\r\n    if (number >= 1000) {\r\n        return (number / 1000).toFixed(2) + 'K';\r\n    }\r\n    else if (number >= 1000000) {\r\n        return (number / 1000000).toFixed(2) + 'M';\r\n    }\r\n\r\n    return number.toFixed(2);\r\n};","import React, { Component } from 'react'\r\n\r\nexport default class CombatantCompact extends Component {\r\n    jobImage(job) {\r\n        if (window.location.host === 'christianallred.github.io'){\r\n            return `${window.location.origin}/ffxiv-overlay/glow/${job.toLowerCase()}.png`;\r\n        }\r\n        return `/glow/${job.toLowerCase()}.png`;\r\n    }\r\n\r\n    render() {\r\n        //var width = parseInt(this.props.data.damage / this.props.encounterDamage * 100, 10) + '%';\r\n        var width = Math.min(100, parseInt(this.props.total / this.props.max * 100, 10)) + '%';\r\n\r\n        return (\r\n            this.props.perSecond === '---' ? null :\r\n            <li\r\n                className={'row ' + this.props.job.toLowerCase() + (this.props.isSelf ? ' self' : '')}\r\n                onClick={this.props.onClick}>\r\n                <div\r\n                    className='bar'\r\n                    style={{width: width}} />\r\n                    \r\n                    <div className=\"text-overlay\">\r\n                        <div className=\"stats\">\r\n                            <span className=\"total\">\r\n                                {this.props.totalFormatted}\r\n                            </span>\r\n\r\n                            {this.props.additional ?\r\n                            <span className=\"additional\">\r\n                                [{this.props.additional}]\r\n                            </span> : null }\r\n\r\n                            (\r\n                                <span className=\"ps\">\r\n                                    {this.props.perSecond},\r\n                                </span>\r\n\r\n                                <span className=\"percent\">\r\n                                    {this.props.percentage}\r\n                                </span>\r\n                            )\r\n                        </div>\r\n\r\n                        <div className=\"info\">\r\n                            <span className='job-icon'>\r\n                                <img src={this.jobImage(this.props.job)} />\r\n                            </span>\r\n                            <span className=\"rank\">\r\n                                {this.props.rank}.\r\n                            </span>\r\n                            <span className=\"character-name\">\r\n                                {this.props.characterName}\r\n                            </span>\r\n                            <span className=\"character-job\">\r\n                                {this.props.job}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\nCombatantCompact.defaultProps = {\r\n    onClick() {}\r\n};","import React, { Component } from 'react'\r\nimport {isArray} from 'lodash'\r\nimport formatNumber from '../utils/formatter';\r\nimport CombatantCompact from './CombatantCompact'\r\n\r\nexport default class Combatants extends Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        // if data is empty then don't re-render\r\n        if (Object.getOwnPropertyNames(nextProps.data).length === 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        var rows = [];\r\n        var maxRows = 12;\r\n        var isDataArray = isArray(this.props.data);\r\n        var dataArray = isDataArray ? this.props.data : Object.keys(this.props.data);\r\n        var limit = Math.max(dataArray.length, maxRows);\r\n        var names = dataArray.slice(0, maxRows-1);\r\n        var maxdps = false;\r\n        var combatant;\r\n        var row;\r\n        var isSelf;\r\n        var rank = 1;\r\n        var stats;\r\n\r\n        for (var i = 0; i < names.length; i++) {\r\n            combatant = isDataArray ? this.props.data[i] : this.props.data[names[i]];\r\n            stats = null;\r\n\r\n            isSelf = combatant.name === 'YOU' || combatant.name === 'You';\r\n\r\n            if (combatant.Job !== \"\") {\r\n                // should probably fix this\r\n                if (this.props.currentView === 'Healing') {\r\n                    if (parseInt(combatant.healed, 10) > 0) {\r\n                        if (!maxdps) {\r\n                            maxdps = parseFloat(combatant.healed);\r\n                        }\r\n                        stats = {\r\n                            job: combatant.Job || '',\r\n                            characterName: combatant.name,\r\n                            total: combatant.healed,\r\n                            totalFormatted: formatNumber(combatant.healed),\r\n                            perSecond: formatNumber(combatant.enchps),\r\n                            additional: combatant['OverHealPct'],\r\n                            percentage: combatant['healed%']\r\n                        }\r\n                    }\r\n                }\r\n                else if (this.props.currentView === 'Tanking') {\r\n                    if (parseInt(combatant.damagetaken, 10) > 0) {\r\n                        if (!maxdps) {\r\n                            maxdps = parseFloat(combatant.damagetaken);\r\n                        }\r\n                        stats = {\r\n                            job: combatant.Job || '',\r\n                            characterName: combatant.name,\r\n                            total: combatant.damagetaken,\r\n                            totalFormatted: formatNumber(combatant.damagetaken),\r\n                            perSecond: combatant.ParryPct,\r\n                            percentage: combatant.BlockPct\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (!maxdps) {\r\n                        maxdps = parseFloat(combatant.damage);\r\n                    }\r\n                    stats = {\r\n                        job: combatant.Job || '',\r\n                        characterName: combatant.name,\r\n                        total: combatant.damage,\r\n                        totalFormatted: formatNumber(combatant.damage),\r\n                        perSecond: formatNumber(combatant.encdps),\r\n                        percentage: combatant['damage%']\r\n                    }\r\n                }\r\n\r\n                if (stats) {\r\n                    rows.push(\r\n                        <CombatantCompact\r\n                            onClick={this.props.onClick}\r\n                            encounterDamage={this.props.encounterDamage}\r\n                            rank={rank}\r\n                            data={combatant}\r\n                            isSelf={isSelf}\r\n                            key={combatant.name}\r\n                            max={maxdps}\r\n                            {...stats}\r\n                        />\r\n                    );\r\n                    rank++;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <ul className=\"combatants\">\r\n                {rows}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\nCombatants.defaultProps = {\r\n    onClick() {}\r\n};","import React, { Component } from 'react'\r\n\r\nexport default class Debugger extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n  \r\n    render() {\r\n      const css ={\r\n        overflowY:'scroll',\r\n        maxHeight:'250px',\r\n        height: '500px',\r\n      }\r\n      return ( <pre style={css}>{JSON.stringify(this.props.data, null,2)}</pre>);\r\n    }\r\n  }\r\n  ","import React, { Component } from 'react'\r\nimport Header from './Header';\r\nimport Combatants from './Combatants';\r\nimport Debugger from './Debugger';\r\nimport {sortBy, filter} from 'lodash'\r\n\r\nvar EncountersArray = []\r\n\r\nexport default class DamageMeter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentViewIndex: 0,\r\n            data: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // pass this into a redux store so i can build graphs and such\r\n        document.addEventListener('onOverlayDataUpdate', this.onOverlayDataUpdate);\r\n        document.addEventListener(\"onOverlayStateUpdate\", this.onOverlayStateUpdate)\r\n        document.addEventListener(\"message\", this.onOverlayMessage)\r\n    }\r\n       \r\n    onOverlayDataUpdate = (update) => {\r\n        this.setState( { data: update.detail } )\r\n    }\r\n\r\n    onOverlayStateUpdate(update){\r\n        // console.log(update.detail)\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (nextState.data.Encounter.encdps === '---') {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.currentViewIndex !== nextState.currentViewIndex) {\r\n            return true;\r\n        }\r\n\r\n        if (this.state.selectedEncounter) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        // save this encounter data\r\n        // if (this.props.parseData.Encounter.title === 'Encounter' &&\r\n        //     nextProps.parseData.Encounter.title !== 'Encounter') {\r\n        //     EncountersArray.unshift({\r\n        //         Encounter: nextProps.parseData.Encounter,\r\n        //         Combatant: nextProps.parseData.Combatant\r\n        //     });\r\n\r\n        //     // Only keep the last 10 fights\r\n        //     if (EncountersArray.length > 10) {\r\n        //         EncountersArray.pop();\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    handleCombatRowClick(e) {\r\n    }\r\n\r\n    handleClick(e) {\r\n    }\r\n\r\n    handleViewChange(e) {\r\n        var index = this.state.currentViewIndex;\r\n\r\n        if (index > this.props.chartViews.length-2) {\r\n            index = 0;\r\n        }\r\n        else {\r\n            index++;\r\n        }\r\n\r\n        this.setState({\r\n            currentViewIndex: index\r\n        });\r\n\r\n    }\r\n\r\n    handleSelectEncounter(index, e) {\r\n        if (index >= 0) {\r\n            this.setState({\r\n                selectedEncounter: EncountersArray[index]\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                selectedEncounter: null\r\n            });\r\n        }\r\n        this.render();\r\n        console.log('handle select', index);\r\n    }\r\n\r\n    render() {\r\n        const debug = false;\r\n\r\n        var combatants = this.state.data.Combatant; \r\n        var encounterData = this.state.data.Encounter;\r\n\r\n        if (this.state.selectedEncounter) {\r\n            combatants = this.state.selectedEncounter.Combatant;\r\n            encounterData = this.state.selectedEncounter.Encounter;\r\n        }\r\n        else {\r\n            // Healing\r\n            // need to resort data if currentView is not damage\r\n            if (this.state.currentViewIndex === 1) {\r\n                combatants = sortBy(filter(combatants, (d) => {\r\n                    return parseInt(d.healed, 10) > 0;\r\n                }), (d) => {\r\n                    if (this.state.currentViewIndex === 1) {\r\n                        return -parseInt(d.healed, 10);\r\n                    }\r\n                });\r\n            }\r\n            // Tanking\r\n            else if (this.state.currentViewIndex === 2) {\r\n                combatants = sortBy(filter(combatants, (d) => {\r\n                    return parseInt(d.damagetaken, 10) > 0;\r\n                }), (d) => {\r\n                    if (this.state.currentViewIndex === 2) {\r\n                        return -parseInt(d.damagetaken, 10);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                onClick={this.handleClick}\r\n                className={'damage-meter' + (!this.props.parseData.isActive ? ' inactive' : '') + (!this.props.noJobColors ? ' show-job-colors' : '')}>\r\n                <Header\r\n                    encounter={encounterData}\r\n                    data={combatants}\r\n                    onViewChange={this.handleViewChange.bind(this)}\r\n                    onSelectEncounter={this.handleSelectEncounter.bind(this)}\r\n                    currentView={this.props.chartViews[this.state.currentViewIndex]}\r\n                    />\r\n                {\r\n                    encounterData && encounterData.damage ? \r\n                    <Combatants\r\n                        currentView={this.props.chartViews[this.state.currentViewIndex]}\r\n                        onClick={this.handleCombatRowClick}\r\n                        data={combatants}\r\n                        encounterDamage={encounterData.damage} />\r\n                    : null\r\n                }\r\n                {\r\n                  !debug ? null :\r\n                  <div>\r\n                    <Debugger data={this.props.data}/>\r\n                  </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nDamageMeter.defaultProps = {\r\n    chartViews: [\r\n        'Damage',\r\n        'Healing',\r\n        'Tanking'\r\n    ],\r\n    parseData: {},\r\n    noJobColors: false\r\n};","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from './components/Header'\r\nimport DamageMeter from './components/DamageMeter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <DamageMeter />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}