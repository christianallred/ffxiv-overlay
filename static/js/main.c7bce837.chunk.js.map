{"version":3,"sources":["utils/constants.js","store/store.js","components/EncounterList/index.jsx","utils/formatter.js","components/EncounterStats/index.jsx","components/Header/index.jsx","components/CombatantBar/index.jsx","components/CombatantsList/index.jsx","components/CombatantDetails/index.jsx","components/DamageMeter.jsx","store/eventListeners.js","App.js","reportWebVitals.ts","index.js"],"names":["whiteListendEncounterMetrics","whiteListCombatantMetrics","HANDLE_DATA_INJEST","HANDLE_STATE_CHANGE","HANDLE_ENCOUNTER_SELECT","HANDLE_COMBATANT_SELECT","HANDLE_CHART_VIEW_CHANGE","TOGGLE_SHOW_DETAILS","chartViews","initialState","data","Encounter","Combatant","Encounters","SelectedEncounter","SelectedCombatant","chartView","showDetails","getSelectedData","state","deepMergeEncounters","ClonedData","Object","assign","sortBy","filter","d","parseInt","healed","damagetaken","damage","getSelectedCombatant","find","cob","name","hanldeCombatantSelect","combatant","type","store","createStore","action","clonedState","cloneDeep","processedData","processData","title","newEncs","concat","length","pop","index","getNextChartView","current","processEncounter","key","hasOwnProperty","processCombatant","encounter","obj","some","metric","encounters","ret","Combatants","prop","deepMergeEncounter","deepMergeCombatants","ExistingEncounter","duration","DURATION","Existing","dps","encdps","hits","crithits","misses","swings","tohit","maxhit","MAXHIT","DirectHitPct","DirectHitCount","CritDirectHitPct","CritDirectHitCount","enchps","critheals","maxheal","MAXHEAL","maxhealward","MAXHEALWARD","OverHealPct","healstaken","powerdrain","powerheal","kills","deaths","threatdelta","Last10DPS","Last30DPS","Last60DPS","Job","ParryPct","BlockPct","mapDispatchToProps","handleEncounterSelect","connect","pure","props","useState","show","setShow","map","onClick","className","numeral","format","foramtNumber","number","parseFloat","toFixed","group","setGroup","self","DataSource","undefined","datalength","x","substring","formatNumber","hanldeChartViewChange","hanldeToggleShowDetails","job","width","Math","min","total","max","perSecond","isSelf","characterName","toLowerCase","style","totalFormatted","additional","percentage","src","alt","rank","names","keys","maxdps","ignoreRank","combatantRows","item","stats","buildHealerData","buildTankData","buildDamageData","charView","DamageRows","formatter","HealingRows","TankingRows","DamageMeter","this","handleClick","classnames","CombatantsList","React","Component","defaultProps","parseData","noJobColors","dispatch","selectedData","getState","window","addOverlayListener","update","console","log","startOverlayEvents","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7bce837.chunk.js","sourcesContent":["export const whiteListendEncounterMetrics = [\r\n    'title',\r\n    'DURATION',\r\n    'damage',\r\n    'dps',\r\n    'encdps',\r\n    'hits',\r\n    'crithits',\r\n    'crithit%',\r\n    'misses',\r\n    'maxhit',\r\n    'MAXHIT',\r\n    'healed',\r\n    'enchps',\r\n    'critheal%',\r\n    'maxheal',\r\n    'maxhealward',\r\n    'damagetaken',\r\n    'healstaken',\r\n    'powerdrain',\r\n    'powerheal',\r\n    'kills',\r\n    'deaths',\r\n    'CurrentZoneName',\r\n    'Last10DPS',\r\n    'Last30DPS',\r\n    'Last60DPS',\r\n]\r\n\r\nexport const whiteListCombatantMetrics = [\r\n    'name',\r\n    \"DURATION\",\r\n    'damage',\r\n    'damage%',\r\n    'dps',\r\n    'encdps',\r\n    'hits',\r\n    'crithits',\r\n    'crithit%',\r\n    'misses',\r\n    'swings',\r\n    'tohit',\r\n    'maxhit',\r\n    'MAXHIT',\r\n    'DirectHitPct',\r\n    'DirectHitCount',\r\n    'CritDirectHitPct',\r\n    'CritDirectHitCount',\r\n\r\n    'healed',\r\n    'healed%',\r\n    'enchps',\r\n    'critheals',\r\n    'critheal%',\r\n    'maxheal',\r\n    'MAXHEAL',\r\n    'maxhealward',\r\n    'MAXHEALWARD',\r\n    'OverHealPct',\r\n\r\n    'damagetaken',\r\n    'healstaken',\r\n    'powerdrain',\r\n    'powerheal',\r\n    'kills',\r\n    'deaths',\r\n    'threatdelta',\r\n    'Last10DPS',\r\n    'Last30DPS',\r\n    'Last60DPS',\r\n    'Job',\r\n    'ParryPct',\r\n    'BlockPct',\r\n]\r\n\r\n/*\r\n{\r\n    \"Encounter\": {\r\n      \"n\": \"\\n\",\r\n      \"t\": \"\\t\",\r\n      \"title\": \"Encounter\",\r\n      \"duration\": \"03:22\",\r\n      \"DURATION\": \"202\",\r\n      \"damage\": \"132174\",\r\n      \"damage-m\": \"0.13\",\r\n      \"damage-*\": \"132.17K\",\r\n      \"DAMAGE-k\": \"132\",\r\n      \"DAMAGE-m\": \"0\",\r\n      \"DAMAGE-b\": \"0\",\r\n      \"DAMAGE-*\": \"132K\",\r\n      \"dps\": \"654.33\",\r\n      \"dps-*\": \"dps-*\",\r\n      \"DPS\": \"654\",\r\n      \"DPS-k\": \"1\",\r\n      \"DPS-m\": \"DPS-m\",\r\n      \"DPS-*\": \"654\",\r\n      \"encdps\": \"654.33\",\r\n      \"encdps-*\": \"654\",\r\n      \"ENCDPS\": \"654\",\r\n      \"ENCDPS-k\": \"1\",\r\n      \"ENCDPS-m\": \"0\",\r\n      \"ENCDPS-*\": \"654\",\r\n      \"hits\": \"67\",\r\n      \"crithits\": \"11\",\r\n      \"crithit%\": \"0%\",\r\n      \"misses\": \"0\",\r\n      \"hitfailed\": \"0\",\r\n      \"swings\": \"67\",\r\n      \"tohit\": \"100.00\",\r\n      \"TOHIT\": \"100\",\r\n      \"maxhit\": \"YOU-Storm's Path-4930\",\r\n      \"MAXHIT\": \"YOU-4930\",\r\n      \"maxhit-*\": \"YOU-Storm's Path-4.93K\",\r\n      \"MAXHIT-*\": \"YOU-4930\",\r\n      \"healed\": \"6497\",\r\n      \"enchps\": \"32.16\",\r\n      \"enchps-*\": \"32\",\r\n      \"ENCHPS\": \"32\",\r\n      \"ENCHPS-k\": \"0\",\r\n      \"ENCHPS-m\": \"0\",\r\n      \"ENCHPS-*\": \"32\",\r\n      \"heals\": \"2\",\r\n      \"critheals\": \"11\",\r\n      \"critheal%\": \"0%\",\r\n      \"cures\": \"0\",\r\n      \"maxheal\": \"YOU-Storm's Path-3285\",\r\n      \"MAXHEAL\": \"YOU-3285\",\r\n      \"maxhealward\": \"YOU-Storm's Path-3285\",\r\n      \"MAXHEALWARD\": \"YOU-3285\",\r\n      \"maxheal-*\": \"YOU-Storm's Path-3.29K\",\r\n      \"MAXHEAL-*\": \"YOU-3285\",\r\n      \"maxhealward-*\": \"YOU-Storm's Path-3.29K\",\r\n      \"MAXHEALWARD-*\": \"YOU-3285\",\r\n      \"damagetaken\": \"0\",\r\n      \"damagetaken-*\": \"0\",\r\n      \"healstaken\": \"6497\",\r\n      \"healstaken-*\": \"6.50K\",\r\n      \"powerdrain\": \"0\",\r\n      \"powerdrain-*\": \"0\",\r\n      \"powerheal\": \"0\",\r\n      \"powerheal-*\": \"0\",\r\n      \"kills\": \"0\",\r\n      \"deaths\": \"0\",\r\n      \"CurrentZoneName\": \"Middle La Noscea\",\r\n      \"Last10DPS\": \"650\",\r\n      \"Last30DPS\": \"520\",\r\n      \"Last60DPS\": \"724\"\r\n    },\r\n    \"Combatant\": {\r\n      \"YOU\": {\r\n        \"n\": \"\\n\",\r\n        \"t\": \"\\t\",\r\n        \"name\": \"YOU\",\r\n        \"duration\": \"03:22\",\r\n        \"DURATION\": \"202\",\r\n        \"damage\": \"132174\",\r\n        \"damage-m\": \"0.13\",\r\n        \"damage-b\": \"0.00\",\r\n        \"damage-*\": \"132.17K\",\r\n        \"DAMAGE-k\": \"132\",\r\n        \"DAMAGE-m\": \"0\",\r\n        \"DAMAGE-b\": \"0\",\r\n        \"DAMAGE-*\": \"132K\",\r\n        \"damage%\": \"100%\",\r\n        \"dps\": \"654.33\",\r\n        \"dps-*\": \"654\",\r\n        \"DPS\": \"654\",\r\n        \"DPS-k\": \"1\",\r\n        \"DPS-m\": \"0\",\r\n        \"DPS-*\": \"654\",\r\n        \"encdps\": \"654.33\",\r\n        \"encdps-*\": \"654\",\r\n        \"ENCDPS\": \"654\",\r\n        \"ENCDPS-k\": \"1\",\r\n        \"ENCDPS-m\": \"0\",\r\n        \"ENCDPS-*\": \"654\",\r\n        \"hits\": \"67\",\r\n        \"crithits\": \"11\",\r\n        \"crithit%\": \"16%\",\r\n        \"crittypes\": \"0.0%L - 0.0%F - 0.0%M\",\r\n        \"misses\": \"0\",\r\n        \"hitfailed\": \"0\",\r\n        \"swings\": \"67\",\r\n        \"tohit\": \"100.00\",\r\n        \"TOHIT\": \"100\",\r\n        \"maxhit\": \"Storm's Path-4930\",\r\n        \"MAXHIT\": \"4930\",\r\n        \"maxhit-*\": \"Storm's Path-4.93K\",\r\n        \"MAXHIT-*\": \"4930\",\r\n        \"healed\": \"6497\",\r\n        \"healed%\": \"100%\",\r\n        \"enchps\": \"32.16\",\r\n        \"enchps-*\": \"32\",\r\n        \"ENCHPS\": \"32\",\r\n        \"ENCHPS-k\": \"0\",\r\n        \"ENCHPS-m\": \"0\",\r\n        \"ENCHPS-*\": \"32\",\r\n        \"critheals\": \"0\",\r\n        \"critheal%\": \"0%\",\r\n        \"heals\": \"2\",\r\n        \"cures\": \"0\",\r\n        \"maxheal\": \"Storm's Path-3285\",\r\n        \"MAXHEAL\": \"3285\",\r\n        \"maxhealward\": \"Storm's Path-3285\",\r\n        \"MAXHEALWARD\": \"3285\",\r\n        \"maxheal-*\": \"Storm's Path-3.29K\",\r\n        \"MAXHEAL-*\": \"3.29K\",\r\n        \"maxhealward-*\": \"Storm's Path-3.29K\",\r\n        \"MAXHEALWARD-*\": \"3.29K\",\r\n        \"damagetaken\": \"0\",\r\n        \"damagetaken-*\": \"0\",\r\n        \"healstaken\": \"6497\",\r\n        \"healstaken-*\": \"6.50K\",\r\n        \"powerdrain\": \"0\",\r\n        \"powerdrain-*\": \"0\",\r\n        \"powerheal\": \"0\",\r\n        \"powerheal-*\": \"0\",\r\n        \"kills\": \"0\",\r\n        \"deaths\": \"0\",\r\n        \"threatstr\": \"+(0)0/-(0)0\",\r\n        \"threatdelta\": \"0\",\r\n        \"NAME3\": \"YOU\",\r\n        \"NAME4\": \"YOU\",\r\n        \"NAME5\": \"YOU\",\r\n        \"NAME6\": \"YOU\",\r\n        \"NAME7\": \"YOU\",\r\n        \"NAME8\": \"YOU\",\r\n        \"NAME9\": \"YOU\",\r\n        \"NAME10\": \"YOU\",\r\n        \"NAME11\": \"YOU\",\r\n        \"NAME12\": \"YOU\",\r\n        \"NAME13\": \"YOU\",\r\n        \"NAME14\": \"YOU\",\r\n        \"NAME15\": \"YOU\",\r\n        \"Last10DPS\": \"487\",\r\n        \"Last30DPS\": \"520\",\r\n        \"Last60DPS\": \"698\",\r\n        \"Job\": \"War\",\r\n        \"ParryPct\": \"0%\",\r\n        \"BlockPct\": \"0%\",\r\n        \"IncToHit\": \"---\",\r\n        \"OverHealPct\": \"100%\",\r\n        \"DirectHitPct\": \"3%\",\r\n        \"DirectHitCount\": \"2\",\r\n        \"CritDirectHitCount\": \"0\",\r\n        \"CritDirectHitPct\": \"0%\"\r\n      }\r\n    },\r\n    \"isActive\": \"true\"\r\n  }\r\n  */","import { createStore } from 'redux'\r\nimport { concat, sortBy,filter, cloneDeep } from 'lodash';\r\nimport {whiteListendEncounterMetrics,whiteListCombatantMetrics} from '../utils/constants';\r\n// Constants\r\nconst HANDLE_DATA_INJEST = \"HANDLE_DATA_INJEST\";\r\nconst HANDLE_STATE_CHANGE = \"HANDLE_STATE_CHANGE\";\r\nconst HANDLE_ENCOUNTER_SELECT = \"HANDLE_ENCOUNTER_SELECT\";\r\nconst HANDLE_COMBATANT_SELECT = \"HANDLE_COMBATANT_SELECT\"\r\nconst HANDLE_CHART_VIEW_CHANGE = \"HANDLE_CHART_VIEW_CHANGE\";\r\nconst TOGGLE_SHOW_DETAILS = \"TOGGLE_SHOW_DETAILS\";\r\n\r\n\r\nexport const chartViews =  {\r\n    Damage: 'Damage',\r\n    Healing: 'Healing',\r\n    Tanking: 'Tanking'\r\n}\r\n\r\n// Initial\r\nconst initialState = {\r\n    data: {\r\n        Encounter: {}, \r\n        Combatant: {},\r\n    },\r\n    Encounters: [],\r\n    SelectedEncounter: null,\r\n    SelectedCombatant: null,\r\n    chartView: chartViews.Damage,\r\n    showDetails: false,\r\n}\r\n\r\n\r\n// Reducers\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case HANDLE_DATA_INJEST:\r\n            var clonedState = cloneDeep(state);\r\n            const processedData = processData(action.data);\r\n\r\n            if (\r\n                clonedState.data.Encounter && clonedState.data.Encounter.title === 'Encounter' &&\r\n                processedData.Encounter.title !== 'Encounter'\r\n            ){\r\n                var newEncs = concat(\r\n                    [ processedData ],\r\n                    clonedState.Encounters\r\n                )\r\n                if (newEncs.length > 15){\r\n                    newEncs.pop();\r\n                }   \r\n                \r\n                clonedState.Encounters = newEncs\r\n            }\r\n\r\n            // this is important that it is at the end\r\n            clonedState.data = processedData\r\n            return clonedState;\r\n\r\n        case HANDLE_STATE_CHANGE:\r\n            \r\n            return state;\r\n        case HANDLE_ENCOUNTER_SELECT: \r\n            return {...state, SelectedEncounter: action.index, SelectedCombatant: null}\r\n        case HANDLE_CHART_VIEW_CHANGE: \r\n            return {...state, chartView: getNextChartView(state.chartView)}\r\n        case TOGGLE_SHOW_DETAILS:\r\n            return {...state, showDetails: !state.showDetails}\r\n        case HANDLE_COMBATANT_SELECT: \r\n            return {...state, SelectedCombatant: action.combatant}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Selector\r\nexport const getSelectedData = (state) => {\r\n    var data = {};\r\n\r\n    // first see what encounter we are viewing. \r\n    if (state.SelectedEncounter !== null){\r\n        if (state.SelectedEncounter === \"ALL\"){\r\n            //data = state.data\r\n            data = deepMergeEncounters( state.Encounters )\r\n        } else {\r\n            data = state.Encounters[state.SelectedEncounter]\r\n        }\r\n    } else {\r\n        data = state.data\r\n    }\r\n\r\n    // now see what data set we want. \r\n    var ClonedData = Object.assign({}, data);\r\n    // this is bad because it is changing the shape of combatants\r\n    if (state.chartView === chartViews.Healing) {\r\n        ClonedData.Combatant = sortBy(\r\n            filter(ClonedData.Combatant, (d) => parseInt(d.healed, 10) > 0), \r\n            (d) => -parseInt(d.healed, 10)   \r\n        );\r\n    }\r\n    else if (state.chartView === chartViews.Tanking) {\r\n        ClonedData.Combatant = sortBy( \r\n            filter(ClonedData.Combatant, d => parseInt(d.damagetaken, 10) > 0),\r\n            (d) => -parseInt(d.damagetaken, 10)\r\n        );\r\n    } \r\n    else if (state.chartView === chartViews.Damage){\r\n        ClonedData.Combatant = sortBy( \r\n            filter(ClonedData.Combatant, d => parseInt(d.damage, 10) > 0),\r\n            (d) => -parseInt(d.damage, 10)\r\n        );\r\n    }\r\n\r\n    return ClonedData;\r\n}\r\n\r\nexport const getSelectedCombatant = (state) => {\r\n    const Encounter = getSelectedData(state);\r\n    return Encounter.Combatant.find(cob => cob.name === state.SelectedCombatant)\r\n   //  return Encounter.Combatant[state.SelectedCombatant]\r\n}\r\n\r\n\r\n\r\n// Actions\r\nexport const hanldeInjest = (data) => ({\r\n    type: HANDLE_DATA_INJEST,\r\n    data \r\n})\r\nexport const handleStateChange = (data) => ({\r\n    type: HANDLE_STATE_CHANGE,\r\n    data\r\n})\r\n\r\nexport const handleEncounterSelect = (index) => ({\r\n    type: HANDLE_ENCOUNTER_SELECT,\r\n    index\r\n})\r\nexport const hanldeChartViewChange = () => ({\r\n    type: HANDLE_CHART_VIEW_CHANGE,\r\n\r\n})\r\nexport const hanldeToggleShowDetails = () => ({\r\n    type: TOGGLE_SHOW_DETAILS,\r\n\r\n})\r\nexport const hanldeCombatantSelect = (combatant) => ({\r\n    type: HANDLE_COMBATANT_SELECT,\r\n    combatant\r\n})\r\n\r\n\r\n\r\n\r\n// Store\r\nconst store = createStore( reducer, initialState )\r\n\r\n\r\n\r\nexport default store;\r\n\r\n// Helpers\r\nconst getNextChartView = (current) => {\r\n    switch(current){\r\n        case chartViews.Damage: \r\n            return chartViews.Healing\r\n        case chartViews.Healing:\r\n                return chartViews.Tanking\r\n        case chartViews.Tanking: \r\n            return chartViews.Damage\r\n        default: \r\n            return chartViews.Damage\r\n    }\r\n}\r\n\r\n// tehse functions are for simplifying teh data from teh plugin\r\nconst processData = (data) => {\r\n    var processData = {\r\n        Encounter: processEncounter(data.Encounter),\r\n        Combatant: {},\r\n    };\r\n    for (const key in data.Combatant) {\r\n        if (!data.Combatant.hasOwnProperty(key)) continue;\r\n        processData.Combatant[key] = processCombatant(data.Combatant[key])\r\n    }\r\n    return processData;\r\n}\r\nconst processEncounter = ( Encounter ) => {\r\n    var encounter = {};\r\n    for(let obj in Encounter){\r\n        if (!Encounter.hasOwnProperty(obj)) continue;\r\n        if (whiteListendEncounterMetrics.some(metric => metric === obj)){\r\n            encounter[obj] = Encounter[obj];\r\n        }\r\n    }\r\n    return encounter\r\n}\r\nconst processCombatant = ( Combatant ) => {\r\n    var combatant = {};\r\n    for(let obj in Combatant){\r\n        if (!Combatant.hasOwnProperty(obj)) continue;\r\n        if (whiteListCombatantMetrics.some(metric => metric === obj)){\r\n            combatant[obj] = Combatant[obj];\r\n        }\r\n    }\r\n    return combatant\r\n}\r\n\r\n\r\n// this is so taht we can use the All COmmand pretty broken atm...\r\nconst deepMergeEncounters = (encounters) => {\r\n    var Encounters = cloneDeep(encounters);\r\n    var ret = {\r\n        Combatant: {},\r\n        Encounter: {},\r\n    }\r\n    for (let index = 0; index < Encounters.length; index++) {\r\n        const encounter = Encounters[index];\r\n        const Combatants = encounter.Combatant;\r\n        const Encounter = encounter.Encounter;\r\n        if (index === 0){\r\n            ret = encounter;\r\n            continue;\r\n        }\r\n        ret.Encounter = deepMergeEncounter(Encounter, ret.Encounter) \r\n        for (let prop in Combatants){\r\n            if (!Combatants.hasOwnProperty(prop)) continue\r\n            const combatant = Combatants[prop];\r\n            if ( ret.Combatant.hasOwnProperty(prop) ){\r\n                ret.Combatant[prop] = deepMergeCombatants(combatant, ret.Combatant[prop] )\r\n            } else {\r\n                ret.Combatant[prop] = combatant\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nconst deepMergeEncounter = (encounter, ExistingEncounter) => { \r\n    // todo: finish teh merge logic\r\n    return {\r\n        ...ExistingEncounter,\r\n        title: \"All\",\r\n        duration: '--', // TODO:\r\n        DURATION: parseInt(ExistingEncounter.DURATION) + parseInt(encounter.DURATION),\r\n        damage: parseInt(ExistingEncounter.damage) + parseInt(encounter.damage),\r\n        // 'dps',\r\n        // 'encdps',\r\n        // 'hits',\r\n        // 'crithits',\r\n        // 'crithit%',\r\n        // 'misses',\r\n        // 'maxhit',\r\n        // 'MAXHIT',\r\n        // 'healed',\r\n        // 'enchps',\r\n        // 'critheal%',\r\n        // 'maxheal',\r\n        // 'maxhealward',\r\n        // 'damagetaken',\r\n        // 'healstaken',\r\n        // 'powerdrain',\r\n        // 'powerheal',\r\n        // 'kills',\r\n        // 'deaths',\r\n        // 'CurrentZoneName',\r\n        // 'Last10DPS',\r\n        // 'Last30DPS',\r\n        // 'Last60DPS'\r\n    }\r\n    \r\n}\r\nconst deepMergeCombatants = (combatant, Existing) => {\r\n    // TODO: finish teh merge logic. \r\n    var object = {\r\n        ...Existing,\r\n        DURATION: parseInt(Existing.DURATION) + parseInt(combatant.DURATION),\r\n        damage: parseInt(Existing.damage) + parseInt(combatant.damage),\r\n        dps: 0, // TODO: Calculate \r\n        encdps: 0, // TODO: Calculate \r\n        hits: parseInt(Existing.hits) + parseInt(combatant.hits),\r\n        crithits: parseInt(Existing.crithits) + parseInt(combatant.crithits),\r\n        'crithit%': 0, // TODO: Calculate \r\n        misses: parseInt(Existing.misses) + parseInt(combatant.misses),\r\n        swings: parseInt(Existing.swings) + parseInt(combatant.swings),\r\n        tohit: 0, // ???\r\n        maxhit: 0, // calc\r\n        MAXHIT: 0, // calc,\r\n        DirectHitPct: 0, // calc\r\n        DirectHitCount: parseInt(Existing.DirectHitCount) + parseInt(combatant.DirectHitCount),\r\n        CritDirectHitPct: 0, // calc\r\n        CritDirectHitCount: parseInt(Existing.CritDirectHitCount) + parseInt(combatant.CritDirectHitCount),\r\n        healed: parseInt(Existing.healed) + parseInt(combatant.healed),\r\n        'healed%': 0, // calc\r\n        enchps: 0, // calc\r\n        critheals: parseInt(Existing.critheals) + parseInt(combatant.critheals),\r\n        'critheal%': 0, // calc\r\n        maxheal: 0, // calc\r\n        MAXHEAL: 0, // calc\r\n        maxhealward: 0, // calc\r\n        MAXHEALWARD: 0, // calc\r\n        OverHealPct: 0, // calc\r\n        damagetaken: parseInt(Existing.damagetaken) + parseInt(combatant.damagetaken),\r\n        healstaken: parseInt(Existing.healstaken) + parseInt(combatant.healstaken),\r\n        powerdrain: parseInt(Existing.powerdrain) + parseInt(combatant.powerdrain),\r\n        powerheal: parseInt(Existing.powerheal) + parseInt(combatant.powerheal),\r\n        kills: parseInt(Existing.kills) + parseInt(combatant.kills),\r\n        deaths: parseInt(Existing.deaths) + parseInt(combatant.deaths),\r\n        threatdelta: 0, // calc\r\n        Last10DPS: 0,\r\n        Last30DPS: 0, \r\n        Last60DPS: 0,\r\n        Job: combatant.Job,\r\n        ParryPct: 0, // No way to calc\r\n        BlockPct: 0, // no way to calc\r\n    }\r\n    return object;\r\n}\r\n\r\n","import React, {useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport numeral from 'numeral';\r\n\r\nimport {\r\n    handleEncounterSelect, \r\n    getSelectedData\r\n} from '../../store/store'\r\nimport './style.scss'\r\n\r\nconst EncounterList = (props) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const encounters = props.Encounters.map((encounter, index) => {\r\n        return (\r\n            <div key={index} onClick={ () => props.handleEncounterSelect(index)}>\r\n                {encounter.Encounter.title}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"encounter-data ff-header\">\r\n            <span className=\"button\" onClick={ () => setShow( !show ) }>\r\n                {props.Encounter.title ? props.Encounter.title : \"Encounter\"} - {numeral(props.Encounter.DURATION).format(\"00:00\")} \r\n                {!show ? null : <div className=\"dropdown-menu encounters-list-dropdown\">\r\n                    <div onClick={() => props.handleEncounterSelect(null)}>Current Fight</div>\r\n                    {/* <div onClick={() => props.handleEncounterSelect(\"ALL\")}>All</div> */}\r\n                    {encounters}\r\n                </div>\r\n                }   \r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    handleEncounterSelect\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Encounter: getSelectedData(state).Encounter,\r\n        Encounters: state.Encounters\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    null,\r\n    {pure: false}\r\n)(EncounterList)\r\n\r\n\r\n","const foramtNumber = (number) => {\r\n    number = parseFloat(number, 10);\r\n\r\n    if (number >= 1000) {\r\n        return (number / 1000).toFixed(2) + 'K';\r\n    }\r\n    else if (number >= 1000000) {\r\n        return (number / 1000000).toFixed(2) + 'M';\r\n    }\r\n\r\n    return number.toFixed(2);\r\n};\r\n\r\nexport default foramtNumber","import React, {useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport formatNumber from '../../utils/formatter'\r\nimport { getSelectedData } from '../../store/store'\r\nimport './style.scss'\r\n\r\nconst EncounterStats = (props) => {\r\n    const [group, setGroup] = useState(true)\r\n\r\n    if (!props.showDetails) return <div></div>\r\n\r\n    var data = props.Combatant;\r\n    var encounter = props.Encounter;\r\n    \r\n    // need to fix this\r\n    if (!data){\r\n        return <div></div>\r\n    }\r\n\r\n    var self = data['YOU'];\r\n    \r\n    // This is the switcher for Toggling group info or self info\r\n    var DataSource = group ? encounter : self;\r\n    \r\n    if (self === undefined){\r\n        DataSource = encounter;\r\n    }\r\n    \r\n    // Calculate the drect hit % based off of the combatant list. This is not efficient and needs to be removed\r\n    // Once the encounter object is fixed to properly include this info.\r\n    var datalength = 0;\r\n    var DirectHitPct = 0\r\n    var CritDirectHitPct = 0;\r\n    \r\n    if (group){\r\n      if (data !== undefined){\r\n        for (var x in data){\r\n          if(!data.hasOwnProperty(x)) continue;\r\n          DirectHitPct += parseFloat(data[x].DirectHitPct.substring(0, (data[x].DirectHitPct.length - 1)));\r\n          CritDirectHitPct += parseFloat(data[x].CritDirectHitPct.substring(0, (data[x].CritDirectHitPct.length - 1)));\r\n          datalength++;\r\n        }\r\n\r\n        if ( DirectHitPct > 0 ){\r\n            DirectHitPct = parseFloat( DirectHitPct / datalength);\r\n        }\r\n        if (CritDirectHitPct > 0){\r\n          CritDirectHitPct = parseFloat( CritDirectHitPct / datalength);\r\n        }\r\n      }\r\n\r\n    } else {\r\n      if (self !== undefined){\r\n        DirectHitPct = self.DirectHitPct;\r\n        CritDirectHitPct = self.CritDirectHitPct;\r\n      }\r\n    }\r\n   \r\n    return (\r\n        <div className=\"extra-details\">\r\n            {\r\n                props.chartView === \"Damage\" ?\r\n                    <div className=\"data-set-view-switcher clearfix\" onClick={ () => setGroup(!group) }>\r\n                        <span className={`button data-set-option ${group ? 'active' : ''}`}>Grp</span>\r\n                        <span className={`button data-set-option ${!group ? 'active' : ''}`}>Ind</span>\r\n                    </div>\r\n                : null\r\n            }\r\n            <div className=\"extra-row damage\">\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">Damage</span>\r\n                    <span className=\"value ff-text\">\r\n                        {`${formatNumber(DataSource.damage)} (${formatNumber(DataSource.encdps)})`}\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">Max</span>\r\n                    <span className=\"value ff-text\">\r\n                        {DataSource.maxhit}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"extra-row damage\">\r\n                {/* crithit is not being calculated properly in the Encounter object so instead we are calcing it on the fly*/}\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">Crit%</span>\r\n                    <span className=\"value ff-text\">\r\n                    { formatNumber( parseFloat(DataSource.crithits / DataSource.hits * 100) ) + \"%\" }\r\n                    </span>\r\n                </div>\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">Misses</span>\r\n                    <span className=\"value ff-text\">\r\n                        {encounter.misses}\r\n                    </span>\r\n                </div>\r\n                {/* DirectHitPct coming from the Encounter object is missing so we are calcing above */}\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">Direct%</span>\r\n                    <span className=\"value ff-text\">\r\n                        {formatNumber(DirectHitPct) + \"%\"}\r\n                    </span>\r\n                </div>\r\n                {/* CritDirectHitPct coming from the Encounter object is missing so we are calcing above */}\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">DirectCrit%</span>\r\n                    <span className=\"value ff-text\">\r\n                        {formatNumber(CritDirectHitPct) + \"%\"}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"extra-row healing\">\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">Heals</span>\r\n                    <span className=\"value ff-text\">\r\n                        {`${formatNumber(DataSource.healed)} (${formatNumber(DataSource.enchps)})`}\r\n                    </span>\r\n                </div>\r\n                {/* Overlay plugin is not returning correct heal values  */}\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">Crit%</span>\r\n                    <span className=\"value ff-text\">\r\n                        {DataSource['critheal%']}\r\n                    </span>\r\n                </div>\r\n                <div className=\"cell\">\r\n                    <span className=\"label ff-header\">Max</span>\r\n                    <span className=\"value ff-text\">\r\n                        {DataSource.maxheal}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...getSelectedData(state),\r\n        chartView: state.chartView,\r\n        showDetails: state.showDetails\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    null,\r\n    null,\r\n    {pure: false}\r\n)(EncounterStats)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport EncounterList from '../EncounterList/'\r\nimport EncounterStats from '../EncounterStats/'\r\nimport {\r\n    hanldeChartViewChange,\r\n    hanldeToggleShowDetails\r\n} from '../../store/store'\r\n\r\nimport './style.scss'\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"encounter-header\">\r\n                <div>\r\n                    <EncounterList />\r\n                </div>\r\n                <div>\r\n                    <div className=\"button arrow\"\r\n                        onClick={props.hanldeToggleShowDetails}>\r\n                        {props.showDetails ? <span>&#8593;</span> : <span>&#8595;</span>} \r\n                    </div>\r\n                    <div className={`button chart-view-switcher ${props.chartView}`} \r\n                        onClick={props.hanldeChartViewChange}>\r\n                       {props.chartView}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <EncounterStats />\r\n        </div>  \r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    hanldeChartViewChange,\r\n    hanldeToggleShowDetails\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Encounters: state.Encounters,\r\n        showDetails: state.showDetails,\r\n        chartView: state.chartView\r\n    }\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    null,\r\n    {pure: false}\r\n)(Header)\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {hanldeCombatantSelect} from '../../store/store';\r\nimport Jobs from '../../utils/jobs'\r\nimport './style.scss'\r\n\r\nconst CombatantBar = (props) => {\r\n    const jobImage = (job) => `/images/icon/glow/${job}.png`\r\n\r\n    var width = Math.min(100, parseInt(props.total / props.max * 100, 10)) + '%';\r\n    if (props.perSecond === \"--- \") return null;\r\n\r\n    return <li\r\n        className={'row ' + (props.isSelf ? ' self' : '')}\r\n        onClick={() => props.hanldeCombatantSelect(props.characterName)}>\r\n        <div className={'bar ' + props.job.toLowerCase() } style={{width: width}} />\r\n        <div className=\"text-overlay\">\r\n            <div className=\"stats\">\r\n                <span className=\"total\">\r\n                    {props.totalFormatted}\r\n                </span>\r\n                {props.additional ?\r\n                    <span className=\"additional\">[{props.additional}]</span> \r\n                : null }\r\n                (\r\n                    <span className=\"ps\">\r\n                        {props.perSecond},\r\n                    </span>\r\n                    <span className=\"percent\">\r\n                        {props.percentage}\r\n                    </span>\r\n                )\r\n            </div>\r\n                \r\n            <div className=\"info\">\r\n                <span className='job-icon'>\r\n                    <img src={jobImage(props.job)} alt={props.job}/>\r\n                </span>\r\n                <span className=\"rank\">\r\n                    {props.rank}.\r\n                </span>\r\n                <span className=\"character-name\">\r\n                    {props.characterName}\r\n                </span>\r\n                <span className=\"character-job\">\r\n                    {props.job}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </li>\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    hanldeCombatantSelect\r\n}\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps,\r\n    null,\r\n    {pure: false}\r\n)(CombatantBar)","import React from 'react'\r\nimport formatNumber from '../../utils/formatter';\r\nimport CombatantBar from '../CombatantBar/'\r\nimport {connect} from 'react-redux';\r\nimport {getSelectedData,chartViews} from '../../store/store'\r\nimport './style.scss'\r\n\r\nconst Combatants = (props) => {\r\n    let maxRows = 20;\r\n    let names =  Object.keys(props.Combatants)\r\n    let maxdps = false;\r\n    let ignoreRank = 0;\r\n    \r\n    const buildHealerData = (combatant) => {\r\n        return {\r\n            job: combatant.Job || '',\r\n            characterName: combatant.name,\r\n            total: combatant.healed,\r\n            totalFormatted: formatNumber(combatant.healed),\r\n            perSecond: formatNumber(combatant.enchps),\r\n            additional: combatant['OverHealPct'],\r\n            percentage: combatant['healed%']\r\n        }\r\n    }\r\n    const buildTankData = (combatant) => {\r\n        return{\r\n            job: combatant.Job || '',\r\n            characterName: combatant.name,\r\n            total: combatant.damagetaken,\r\n            totalFormatted: formatNumber(combatant.damagetaken),\r\n            perSecond: combatant.ParryPct,\r\n            percentage: combatant.BlockPct\r\n        }\r\n    }\r\n    const buildDamageData = (combatant) => {\r\n        return {\r\n            job: combatant.Job || '',\r\n            characterName: combatant.name,\r\n            total: combatant.damage,\r\n            totalFormatted: formatNumber(combatant.damage),\r\n            perSecond: formatNumber(combatant.encdps),\r\n            percentage: combatant['damage%']\r\n        }\r\n    }\r\n    \r\n\r\n    let combatantRows = names.map((item, index) => {        \r\n        if (index > maxRows) return null;\r\n        let combatant = props.Combatants[item];\r\n        let stats = null;\r\n        let isSelf = combatant.name === 'YOU' || combatant.name === 'You';\r\n\r\n        if (combatant.Job === \"\"){\r\n            ignoreRank += 1\r\n        } else if (combatant.Job !== \"\") {\r\n            if (props.chartView === chartViews.Healing) {\r\n                if (parseInt(combatant.healed, 10) > 0) {\r\n                    if (!maxdps){\r\n                        maxdps = parseFloat(combatant.healed);\r\n                    }\r\n                    stats = buildHealerData(combatant)\r\n                }\r\n            }\r\n            else if (props.chartView === chartViews.Tanking) {\r\n                if (parseInt(combatant.damagetaken, 10) > 0) {\r\n                    if(!maxdps){\r\n                        maxdps = parseFloat(combatant.damagetaken);\r\n                    }\r\n                    stats = buildTankData(combatant)\r\n                }\r\n            }\r\n            else {\r\n                if(!maxdps){\r\n                    maxdps = parseFloat(combatant.damage);\r\n                }\r\n                stats = buildDamageData(combatant)\r\n            }\r\n\r\n            return <CombatantBar\r\n                    onClick={props.onClick}\r\n                    rank={ index + 1 - ignoreRank }\r\n                    data={combatant}\r\n                    isSelf={isSelf}\r\n                    key={combatant.name}\r\n                    max={maxdps}\r\n                    {...stats} />\r\n        }\r\n        return null\r\n    })\r\n\r\n    // var types = [\r\n    //     'pld',\r\n    //     'war',\r\n    //     'drk',\r\n    //     'gbr',\r\n\r\n    //     'whm',\r\n    //     'sch',\r\n    //     'ast',\r\n\r\n\r\n    //     \"mnk\",\r\n    //     'rog',\r\n    //     'drg',\r\n    //     'sam',\r\n\r\n    //     'blm',\r\n    //     'smn',\r\n    //     'rdm',\r\n\r\n    //     'brd',\r\n    //     'mch',\r\n    //     'dnc'\r\n    // ]\r\n    // let test = [];\r\n    // for (const [index,item] of types) {\r\n    //     test.push( \r\n    //         <li class=\"row\">\r\n    //             <div class={`bar ${item}`} style={{width: '100%'}}/>\r\n    //             <div className=\"text-overlay\">{item}</div>\r\n    //         </li>)\r\n    // }\r\n    return (\r\n        <ul className=\"combatants\">\r\n            {combatantRows}\r\n        </ul>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    const selected = getSelectedData(state);\r\n    return {\r\n        Combatants: selected.Combatant,\r\n        chartView: state.chartView,\r\n    }\r\n}\r\n\r\n  \r\n// const mapDispatchToProps = { increment, decrement, reset }\r\n  \r\nexport default connect(\r\n    mapStateToProps,\r\n    null,\r\n    null,\r\n    {pure: false}\r\n)(Combatants)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n    getSelectedCombatant,\r\n    hanldeCombatantSelect\r\n} from '../../store/store'\r\nimport './styles.scss'\r\nimport formatter from '../../utils/formatter';\r\n\r\n// TODO: work out better styling\r\nconst CombatantDetails =(props) =>{\r\n    const DamageRowsMap = ['damage','encdps','MAXHIT','crithit%','DirectHitPct','CritDirectHitPct','misses','tohit',]\r\n    const HealingRowsMap = ['healed','enchps','OverHealPct','critheal%','MAXHEAL','MAXHEALWARD',]\r\n    const TankingRowsMap = ['damagetaken','healstaken','ParryPct','BlockPct','threatdelta','deaths',]\r\n\r\n    const DamageRows = DamageRowsMap.map((item,index) => {\r\n        return <div key={index}>\r\n            <span className=\"label ff-header\">{item.toLowerCase()}: </span>\r\n            <span className=\"value ff-text\">{formatter(props.Combatant[item])}</span>\r\n        </div>\r\n    })\r\n    const HealingRows = HealingRowsMap.map((item,index) => {\r\n        return <div key={index}>\r\n            <span className=\"label ff-header\">{item.toLowerCase()}: </span>\r\n            <span className=\"value ff-text\">{formatter(props.Combatant[item])}</span>\r\n        </div>\r\n    })\r\n    const TankingRows = TankingRowsMap.map((item,index) => {\r\n        return <div key={index}>\r\n            <span className=\"label ff-header\">{item.toLowerCase()}: </span>\r\n            <span className=\"value ff-text\">{formatter(props.Combatant[item])}</span>\r\n        </div>\r\n    })\r\n   \r\n    return (\r\n        <div className=\"combatant-detail\">\r\n            \r\n            <span className=\"button\" onClick={() => props.hanldeCombatantSelect(null)}>back</span>\r\n            \r\n            <span className=\"label ff-header\"> {props.Combatant.name}</span>\r\n\r\n            <div className=\"details-wrapper\">\r\n                <div>\r\n                    <span className=\"label ff-header\">Damage</span>\r\n                    {DamageRows}\r\n                </div>\r\n                <div>\r\n                    <span className=\"label ff-header\">Healing</span>\r\n                    {HealingRows}\r\n                </div>\r\n                <div>\r\n                    <span className=\"label ff-header\">Tanking</span>\r\n                    {TankingRows}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    hanldeCombatantSelect\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) =>\r\n{\r\n    return {\r\n        charView: state.chartView,\r\n        Combatant: getSelectedCombatant(state)\r\n    }\r\n} \r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    null,\r\n    {pure: false}\r\n)(CombatantDetails)","import React  from 'react'\r\nimport classnames from 'classnames';\r\nimport { connect } from 'react-redux'\r\n\r\nimport Header from './Header/';\r\nimport CombatantsList from './CombatantsList/';\r\nimport CombatantDetails from './CombatantDetails/'\r\nimport {\r\n    getSelectedData,\r\n    getSelectedCombatant\r\n} from '../store/store'\r\n\r\nclass DamageMeter extends React.Component {\r\n    render() {  \r\n        return (\r\n            <div\r\n                onClick={this.handleClick}\r\n                className={classnames({\r\n                    'damage-meter':true,\r\n                    'resizable': true,// fix this\r\n                })}>\r\n                <Header />\r\n                {this.props.SelectedCombatant ? \r\n                    <CombatantDetails /> :\r\n                    <CombatantsList />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nDamageMeter.defaultProps = {\r\n    parseData: {},\r\n    noJobColors: false\r\n};\r\n\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    const selectedData = getSelectedData(state);\r\n    const SelectedCombatant = getSelectedCombatant(state);\r\n    return {\r\n        Combatants: selectedData.Combatant,\r\n        Encounter: selectedData.Encounter,\r\n        Encounters: state.Encounters,\r\n        SelectedCombatant\r\n    }\r\n}\r\n\r\n  \r\n// const mapDispatchToProps = { increment, decrement, reset }\r\n  \r\nexport default connect(\r\n    mapStateToProps,\r\n    null,\r\n    null,\r\n    {pure: false}\r\n)(DamageMeter)","import { hanldeInjest } from './store'\r\n\r\nexport const handleEventsListner = (dispatch, getState) => {\r\n    const onOverlayDataUpdate = (update) => {\r\n        console.log(update)\r\n        dispatch(hanldeInjest(update))\r\n    }\r\n    \r\n    window.addOverlayListener('CombatData',  onOverlayDataUpdate)\r\n\r\n    window.startOverlayEvents()\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux'\r\nimport DamageMeter from './components/DamageMeter';\r\nimport store from './store/store'\r\n\r\nimport {handleEventsListner} from './store/eventListeners'\r\n\r\nhandleEventsListner(store.dispatch, store.getState)\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <DamageMeter />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}